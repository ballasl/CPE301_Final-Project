
CPE301_FinalProjec-TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00001cf2  00001d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800176  00800176  00001dfc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002132  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c23  00000000  00000000  0000414a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d82  00000000  00000000  00004d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b8  00000000  00000000  00005fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170d  00000000  00000000  00006764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_1>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ef       	ldi	r30, 0xF2	; 242
     17e:	fc e1       	ldi	r31, 0x1C	; 28
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 37       	cpi	r26, 0x76	; 118
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a6 e7       	ldi	r26, 0x76	; 118
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ad 37       	cpi	r26, 0x7D	; 125
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 40 03 	call	0x680	; 0x680 <main>
     1a0:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <i2c_init>:
	while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
}

inline void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); /* send stop condition */
     1a8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1ac:	89 e4       	ldi	r24, 0x49	; 73
     1ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b8:	08 95       	ret

000001ba <lis3dh_write_byte>:
#define TWI_SLA_LIS3DH      0b00110000 /* LIS3DH_DEFAULT_ADDRESS for 5 volt //If SDO/SA0 is 3V is 0b00110010 */
#define MAX_ITER	        200
uint8_t twst;

int lis3dh_write_byte(uint8_t addr, uint8_t value)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	58 ec       	ldi	r21, 0xC8	; 200
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     1c0:	ec eb       	ldi	r30, 0xBC	; 188
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
	if (n++ >= MAX_ITER)
	return -1;
	begin:
	USARTDbgSendStr("pointW0\n");
	i2c_start();
	switch (twst = TW_STATUS)
     1c4:	a9 eb       	ldi	r26, 0xB9	; 185
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     1c8:	24 ea       	ldi	r18, 0xA4	; 164

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     1ca:	cb eb       	ldi	r28, 0xBB	; 187
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	40 e3       	ldi	r20, 0x30	; 48
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     1d0:	34 e8       	ldi	r19, 0x84	; 132
     1d2:	03 c0       	rjmp	.+6      	; 0x1da <lis3dh_write_byte+0x20>
     1d4:	51 50       	subi	r21, 0x01	; 1
	uint8_t sla, n = 0;
	int rv = 0;

	sla = TWI_SLA_LIS3DH;
	restart:
	if (n++ >= MAX_ITER)
     1d6:	09 f4       	brne	.+2      	; 0x1da <lis3dh_write_byte+0x20>
     1d8:	50 c0       	rjmp	.+160    	; 0x27a <lis3dh_write_byte+0xc0>
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     1da:	20 83       	st	Z, r18
	while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
     1dc:	90 81       	ld	r25, Z
     1de:	99 23       	and	r25, r25
     1e0:	ec f7       	brge	.-6      	; 0x1dc <lis3dh_write_byte+0x22>
	if (n++ >= MAX_ITER)
	return -1;
	begin:
	USARTDbgSendStr("pointW0\n");
	i2c_start();
	switch (twst = TW_STATUS)
     1e2:	9c 91       	ld	r25, X
     1e4:	98 7f       	andi	r25, 0xF8	; 248
     1e6:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     1ea:	90 31       	cpi	r25, 0x10	; 16
     1ec:	29 f0       	breq	.+10     	; 0x1f8 <lis3dh_write_byte+0x3e>
     1ee:	98 33       	cpi	r25, 0x38	; 56
     1f0:	a1 f3       	breq	.-24     	; 0x1da <lis3dh_write_byte+0x20>
     1f2:	98 30       	cpi	r25, 0x08	; 8
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <lis3dh_write_byte+0x3e>
     1f6:	44 c0       	rjmp	.+136    	; 0x280 <lis3dh_write_byte+0xc6>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     1f8:	48 83       	st	Y, r20
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     1fa:	30 83       	st	Z, r19
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     1fc:	90 81       	ld	r25, Z
     1fe:	99 23       	and	r25, r25
     200:	ec f7       	brge	.-6      	; 0x1fc <lis3dh_write_byte+0x42>
		default:
		return -1;		/* Not in start condition */
	}
	USARTDbgSendStr("pointW1\n");
	i2c_write(sla | TW_WRITE);
	switch (twst = TW_STATUS)
     202:	9c 91       	ld	r25, X
     204:	98 7f       	andi	r25, 0xF8	; 248
     206:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     20a:	90 32       	cpi	r25, 0x20	; 32
     20c:	19 f3       	breq	.-58     	; 0x1d4 <lis3dh_write_byte+0x1a>
     20e:	98 33       	cpi	r25, 0x38	; 56
     210:	21 f3       	breq	.-56     	; 0x1da <lis3dh_write_byte+0x20>
     212:	98 31       	cpi	r25, 0x18	; 24
     214:	31 f5       	brne	.+76     	; 0x262 <lis3dh_write_byte+0xa8>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     216:	88 83       	st	Y, r24
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     218:	30 83       	st	Z, r19
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     21a:	90 81       	ld	r25, Z
     21c:	99 23       	and	r25, r25
     21e:	ec f7       	brge	.-6      	; 0x21a <lis3dh_write_byte+0x60>
		default:
		goto error;		/* must send stop condition */
	}
	USARTDbgSendStr("pointW2\n");
	i2c_write(addr);
	switch (twst = TW_STATUS)
     220:	9c 91       	ld	r25, X
     222:	98 7f       	andi	r25, 0xF8	; 248
     224:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     228:	90 33       	cpi	r25, 0x30	; 48
     22a:	f1 f0       	breq	.+60     	; 0x268 <lis3dh_write_byte+0xae>
     22c:	98 33       	cpi	r25, 0x38	; 56
     22e:	a9 f2       	breq	.-86     	; 0x1da <lis3dh_write_byte+0x20>
     230:	98 32       	cpi	r25, 0x28	; 40
     232:	19 f0       	breq	.+6      	; 0x23a <lis3dh_write_byte+0x80>
	USARTDbgSendStr("pointW5\n");
	return rv;

	error:
	USARTDbgSendStr("pointW4\n");
	rv = -1;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	9f ef       	ldi	r25, 0xFF	; 255
     238:	1c c0       	rjmp	.+56     	; 0x272 <lis3dh_write_byte+0xb8>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     23a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     23e:	84 e8       	ldi	r24, 0x84	; 132
     240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     244:	ec eb       	ldi	r30, 0xBC	; 188
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	88 23       	and	r24, r24
     24c:	ec f7       	brge	.-6      	; 0x248 <lis3dh_write_byte+0x8e>
		default:
		goto error;		/* must send stop condition */
	}
	USARTDbgSendStr("pointW3\n");
	i2c_write(value);
	switch (twst = TW_STATUS)
     24e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     252:	88 7f       	andi	r24, 0xF8	; 248
     254:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <twst>
     258:	88 32       	cpi	r24, 0x28	; 40
     25a:	49 f0       	breq	.+18     	; 0x26e <lis3dh_write_byte+0xb4>
	USARTDbgSendStr("pointW5\n");
	return rv;

	error:
	USARTDbgSendStr("pointW4\n");
	rv = -1;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	9f ef       	ldi	r25, 0xFF	; 255
     260:	08 c0       	rjmp	.+16     	; 0x272 <lis3dh_write_byte+0xb8>
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	05 c0       	rjmp	.+10     	; 0x272 <lis3dh_write_byte+0xb8>
uint8_t twst;

int lis3dh_write_byte(uint8_t addr, uint8_t value)
{
	uint8_t sla, n = 0;
	int rv = 0;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <lis3dh_write_byte+0xb8>
	switch (twst = TW_STATUS)
	{
		case TW_MT_DATA_NACK:
		goto error;		/* device write protected */
		case TW_MT_DATA_ACK:
		rv++;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
	while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
}

inline void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); /* send stop condition */
     272:	24 e9       	ldi	r18, 0x94	; 148
     274:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
	
	quit:
	i2c_stop();
	USARTDbgSendStr("pointW5\n");
	return rv;
     278:	05 c0       	rjmp	.+10     	; 0x284 <lis3dh_write_byte+0xca>
	int rv = 0;

	sla = TWI_SLA_LIS3DH;
	restart:
	if (n++ >= MAX_ITER)
	return -1;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	9f ef       	ldi	r25, 0xFF	; 255
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lis3dh_write_byte+0xca>
		case TW_START:
		break;
		case TW_MT_ARB_LOST:
		goto begin;
		default:
		return -1;		/* Not in start condition */
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	9f ef       	ldi	r25, 0xFF	; 255

	error:
	USARTDbgSendStr("pointW4\n");
	rv = -1;
	goto quit;
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <lis3dh_read_bytes>:

int lis3dh_read_bytes(uint8_t addr, int len, uint8_t *buf)
{
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <lis3dh_read_bytes+0x16>
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 ec       	ldi	r31, 0xC8	; 200
     2a8:	ff 2e       	mov	r15, r31
     2aa:	f0 2d       	mov	r31, r0
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     2ac:	ec eb       	ldi	r30, 0xBC	; 188
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	34 ea       	ldi	r19, 0xA4	; 164
	if (n++ >= MAX_ITER)
	return -1;
	begin:
	USARTDbgSendStr("pointR0\n");
	i2c_start();
	switch (twst = TW_STATUS)
     2b2:	0f 2e       	mov	r0, r31
     2b4:	f9 eb       	ldi	r31, 0xB9	; 185
     2b6:	cf 2e       	mov	r12, r31
     2b8:	d1 2c       	mov	r13, r1
     2ba:	f0 2d       	mov	r31, r0
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     2bc:	23 2f       	mov	r18, r19

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     2be:	0f 2e       	mov	r0, r31
     2c0:	fb eb       	ldi	r31, 0xBB	; 187
     2c2:	af 2e       	mov	r10, r31
     2c4:	b1 2c       	mov	r11, r1
     2c6:	f0 2d       	mov	r31, r0
     2c8:	00 e3       	ldi	r16, 0x30	; 48
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     2ca:	14 e8       	ldi	r17, 0x84	; 132
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <lis3dh_read_bytes+0x4c>
     2ce:	fa 94       	dec	r15
	int rv = 0;
	sla = TWI_SLA_LIS3DH;

	/* First cycle: Master transmitter mode */
	restart:
	if (n++ >= MAX_ITER)
     2d0:	ff 20       	and	r15, r15
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <lis3dh_read_bytes+0x4c>
     2d4:	ad c0       	rjmp	.+346    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     2d6:	0f 2e       	mov	r0, r31
     2d8:	f1 e3       	ldi	r31, 0x31	; 49
     2da:	ef 2e       	mov	r14, r31
     2dc:	f0 2d       	mov	r31, r0
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     2de:	20 83       	st	Z, r18
	while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
     2e0:	90 81       	ld	r25, Z
     2e2:	99 23       	and	r25, r25
     2e4:	ec f7       	brge	.-6      	; 0x2e0 <lis3dh_read_bytes+0x56>
	if (n++ >= MAX_ITER)
	return -1;
	begin:
	USARTDbgSendStr("pointR0\n");
	i2c_start();
	switch (twst = TW_STATUS)
     2e6:	d6 01       	movw	r26, r12
     2e8:	9c 91       	ld	r25, X
     2ea:	98 7f       	andi	r25, 0xF8	; 248
     2ec:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     2f0:	90 31       	cpi	r25, 0x10	; 16
     2f2:	29 f0       	breq	.+10     	; 0x2fe <lis3dh_read_bytes+0x74>
     2f4:	98 33       	cpi	r25, 0x38	; 56
     2f6:	99 f3       	breq	.-26     	; 0x2de <lis3dh_read_bytes+0x54>
     2f8:	98 30       	cpi	r25, 0x08	; 8
     2fa:	09 f0       	breq	.+2      	; 0x2fe <lis3dh_read_bytes+0x74>
     2fc:	9c c0       	rjmp	.+312    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     2fe:	d5 01       	movw	r26, r10
     300:	0c 93       	st	X, r16
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     302:	10 83       	st	Z, r17
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     304:	90 81       	ld	r25, Z
     306:	99 23       	and	r25, r25
     308:	ec f7       	brge	.-6      	; 0x304 <lis3dh_read_bytes+0x7a>
		default:
		return -1;		/* Not in start condition */
	}
	USARTDbgSendStr("pointR1\n");
	i2c_write(sla | TW_WRITE);
	switch (twst = TW_STATUS)
     30a:	d6 01       	movw	r26, r12
     30c:	9c 91       	ld	r25, X
     30e:	98 7f       	andi	r25, 0xF8	; 248
     310:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     314:	90 32       	cpi	r25, 0x20	; 32
     316:	d9 f2       	breq	.-74     	; 0x2ce <lis3dh_read_bytes+0x44>
     318:	98 33       	cpi	r25, 0x38	; 56
     31a:	09 f3       	breq	.-62     	; 0x2de <lis3dh_read_bytes+0x54>
     31c:	98 31       	cpi	r25, 0x18	; 24
     31e:	09 f0       	breq	.+2      	; 0x322 <lis3dh_read_bytes+0x98>
     320:	72 c0       	rjmp	.+228    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     322:	d5 01       	movw	r26, r10
     324:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     326:	10 83       	st	Z, r17
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     328:	90 81       	ld	r25, Z
     32a:	99 23       	and	r25, r25
     32c:	ec f7       	brge	.-6      	; 0x328 <lis3dh_read_bytes+0x9e>
		default:
		goto error;		/* must send stop condition */
	}
	USARTDbgSendStr("pointR2\n");
	i2c_write(addr);
	switch (twst = TW_STATUS)
     32e:	d6 01       	movw	r26, r12
     330:	9c 91       	ld	r25, X
     332:	98 7f       	andi	r25, 0xF8	; 248
     334:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     338:	90 33       	cpi	r25, 0x30	; 48
     33a:	09 f4       	brne	.+2      	; 0x33e <lis3dh_read_bytes+0xb4>
     33c:	67 c0       	rjmp	.+206    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     33e:	98 33       	cpi	r25, 0x38	; 56
     340:	71 f2       	breq	.-100    	; 0x2de <lis3dh_read_bytes+0x54>
     342:	98 32       	cpi	r25, 0x28	; 40
     344:	19 f0       	breq	.+6      	; 0x34c <lis3dh_read_bytes+0xc2>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */

	return rv;

	error:
	rv = -1;
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	9f ef       	ldi	r25, 0xFF	; 255
     34a:	6e c0       	rjmp	.+220    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	TWCR=(1<<TWEN); /* Enable the TWI module */
}

inline void i2c_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); /* send start condition */
     34c:	30 83       	st	Z, r19
	while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
     34e:	90 81       	ld	r25, Z
     350:	99 23       	and	r25, r25
     352:	ec f7       	brge	.-6      	; 0x34e <lis3dh_read_bytes+0xc4>

	/* Next cycle(s): master receiver mode */
	
	USARTDbgSendStr("pointR3\n");
	i2c_start();
	switch (twst = TW_STATUS)
     354:	d6 01       	movw	r26, r12
     356:	9c 91       	ld	r25, X
     358:	98 7f       	andi	r25, 0xF8	; 248
     35a:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     35e:	90 31       	cpi	r25, 0x10	; 16
     360:	31 f0       	breq	.+12     	; 0x36e <lis3dh_read_bytes+0xe4>
     362:	98 33       	cpi	r25, 0x38	; 56
     364:	09 f4       	brne	.+2      	; 0x368 <lis3dh_read_bytes+0xde>
     366:	bb cf       	rjmp	.-138    	; 0x2de <lis3dh_read_bytes+0x54>
     368:	98 30       	cpi	r25, 0x08	; 8
     36a:	09 f0       	breq	.+2      	; 0x36e <lis3dh_read_bytes+0xe4>
     36c:	52 c0       	rjmp	.+164    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

/*********** I2C specific ***********/

inline void i2c_write(unsigned char data)
{
	TWDR = data;
     36e:	d5 01       	movw	r26, r10
     370:	ec 92       	st	X, r14
	TWCR = (1<<TWINT) | (1<<TWEN); /* clear interrupt to start transmission */
     372:	10 83       	st	Z, r17
	while ((TWCR & (1<<TWINT))==0); /* wait for transmission */
     374:	90 81       	ld	r25, Z
     376:	99 23       	and	r25, r25
     378:	ec f7       	brge	.-6      	; 0x374 <lis3dh_read_bytes+0xea>
	}
	
	/* send SLA+R */
	USARTDbgSendStr("pointR4\n");
	i2c_write(sla | TW_READ);
	switch (twst = TW_STATUS)
     37a:	d6 01       	movw	r26, r12
     37c:	9c 91       	ld	r25, X
     37e:	98 7f       	andi	r25, 0xF8	; 248
     380:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <twst>
     384:	90 34       	cpi	r25, 0x40	; 64
     386:	49 f0       	breq	.+18     	; 0x39a <lis3dh_read_bytes+0x110>
     388:	98 34       	cpi	r25, 0x48	; 72
     38a:	09 f4       	brne	.+2      	; 0x38e <lis3dh_read_bytes+0x104>
     38c:	45 c0       	rjmp	.+138    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     38e:	98 33       	cpi	r25, 0x38	; 56
     390:	09 f4       	brne	.+2      	; 0x394 <lis3dh_read_bytes+0x10a>
     392:	a5 cf       	rjmp	.-182    	; 0x2de <lis3dh_read_bytes+0x54>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */

	return rv;

	error:
	rv = -1;
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	47 c0       	rjmp	.+142    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		case TW_MR_ARB_LOST:
		goto begin;
		default:
		goto error;
	}
	for (twcr = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  len > 0;  len--)
     39a:	16 16       	cp	r1, r22
     39c:	17 06       	cpc	r1, r23
     39e:	0c f0       	brlt	.+2      	; 0x3a2 <lis3dh_read_bytes+0x118>
     3a0:	3e c0       	rjmp	.+124    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3a2:	c4 2e       	mov	r12, r20
     3a4:	d5 2e       	mov	r13, r21
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	34 ec       	ldi	r19, 0xC4	; 196
	{
		if (len == 1)
		twcr = (1<<TWINT) | (1<<TWEN); /* send NAK this time */
     3ac:	0f 2e       	mov	r0, r31
     3ae:	f4 e8       	ldi	r31, 0x84	; 132
     3b0:	ff 2e       	mov	r15, r31
     3b2:	f0 2d       	mov	r31, r0
		TWCR = twcr;		/* clear int to start transmission */
     3b4:	ec eb       	ldi	r30, 0xBC	; 188
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
		while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
		switch (twst = TW_STATUS)
     3b8:	09 eb       	ldi	r16, 0xB9	; 185
     3ba:	10 e0       	ldi	r17, 0x00	; 0
		{
			case TW_MR_DATA_NACK:
			len = 0;		/* force end of loop */
			/* FALLTHROUGH */
			case TW_MR_DATA_ACK:
			*buf++ = TWDR;
     3bc:	4b eb       	ldi	r20, 0xBB	; 187
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	56 01       	movw	r10, r12
		default:
		goto error;
	}
	for (twcr = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  len > 0;  len--)
	{
		if (len == 1)
     3c2:	61 30       	cpi	r22, 0x01	; 1
     3c4:	71 05       	cpc	r23, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <lis3dh_read_bytes+0x140>
		twcr = (1<<TWINT) | (1<<TWEN); /* send NAK this time */
     3c8:	3f 2d       	mov	r19, r15
		TWCR = twcr;		/* clear int to start transmission */
     3ca:	30 83       	st	Z, r19
		while ((TWCR & (1<<TWINT)) == 0) ; /* wait for transmission */
     3cc:	20 81       	ld	r18, Z
     3ce:	22 23       	and	r18, r18
     3d0:	ec f7       	brge	.-6      	; 0x3cc <lis3dh_read_bytes+0x142>
		switch (twst = TW_STATUS)
     3d2:	d8 01       	movw	r26, r16
     3d4:	2c 91       	ld	r18, X
     3d6:	28 7f       	andi	r18, 0xF8	; 248
     3d8:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <twst>
     3dc:	20 35       	cpi	r18, 0x50	; 80
     3de:	19 f0       	breq	.+6      	; 0x3e6 <lis3dh_read_bytes+0x15c>
     3e0:	28 35       	cpi	r18, 0x58	; 88
     3e2:	61 f1       	breq	.+88     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3e4:	1f c0       	rjmp	.+62     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{
			case TW_MR_DATA_NACK:
			len = 0;		/* force end of loop */
			/* FALLTHROUGH */
			case TW_MR_DATA_ACK:
			*buf++ = TWDR;
     3e6:	da 01       	movw	r26, r20
     3e8:	2c 91       	ld	r18, X
     3ea:	d5 01       	movw	r26, r10
     3ec:	2c 93       	st	X, r18
     3ee:	bf ef       	ldi	r27, 0xFF	; 255
     3f0:	cb 1a       	sub	r12, r27
     3f2:	db 0a       	sbc	r13, r27
			rv++;
     3f4:	01 96       	adiw	r24, 0x01	; 1
			if(twst == TW_MR_DATA_NACK) goto quit;
     3f6:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <twst>
     3fa:	28 35       	cpi	r18, 0x58	; 88
     3fc:	a9 f0       	breq	.+42     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		case TW_MR_ARB_LOST:
		goto begin;
		default:
		goto error;
	}
	for (twcr = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  len > 0;  len--)
     3fe:	61 50       	subi	r22, 0x01	; 1
     400:	71 09       	sbc	r23, r1
     402:	f1 f6       	brne	.-68     	; 0x3c0 <lis3dh_read_bytes+0x136>
     404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */

	return rv;

	error:
	rv = -1;
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	9f ef       	ldi	r25, 0xFF	; 255
     40a:	0e c0       	rjmp	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
}

int lis3dh_read_bytes(uint8_t addr, int len, uint8_t *buf)
{
	uint8_t sla, twcr, n = 0;
	int rv = 0;
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0b c0       	rjmp	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */

	return rv;

	error:
	rv = -1;
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	9f ef       	ldi	r25, 0xFF	; 255
     416:	08 c0       	rjmp	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
}

int lis3dh_read_bytes(uint8_t addr, int len, uint8_t *buf)
{
	uint8_t sla, twcr, n = 0;
	int rv = 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		case TW_MR_ARB_LOST:
		goto begin;
		default:
		goto error;
	}
	for (twcr = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);  len > 0;  len--)
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */

	return rv;

	error:
	rv = -1;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	9f ef       	ldi	r25, 0xFF	; 255
			goto error;
		}
	}
	quit:
	
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); /* send stop condition */
     428:	24 e9       	ldi	r18, 0x94	; 148
     42a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	return rv;
     42e:	0c c0       	rjmp	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	sla = TWI_SLA_LIS3DH;

	/* First cycle: Master transmitter mode */
	restart:
	if (n++ >= MAX_ITER)
	return -1;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	09 c0       	rjmp	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case TW_START:
		break;
		case TW_MT_ARB_LOST:
		goto begin;
		default:
		return -1;		/* Not in start condition */
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	9f ef       	ldi	r25, 0xFF	; 255
     43a:	06 c0       	rjmp	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			case TW_MR_DATA_NACK:
			len = 0;		/* force end of loop */
			/* FALLTHROUGH */
			case TW_MR_DATA_ACK:
			*buf++ = TWDR;
     43c:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     440:	f5 01       	movw	r30, r10
     442:	20 83       	st	Z, r18
			rv++;
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	f0 cf       	rjmp	.-32     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	return rv;

	error:
	rv = -1;
	goto quit;
}
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	08 95       	ret

00000462 <setup_lis3dh>:
	// ODR3 ODR2 ODR1 ODR0 LPen Zen Yen Xen
	// ODR3		ODR2	ODR1	ODR0
	// 0		1		0		0		-> 50 Hz
	// CTRL_REG1: enable x,y,z@50Hz = 0x47
	USARTDbgSendStr("CTRL_REG1\n");
	if (lis3dh_write_byte(CTRL_REG1,0x47)==-1)
     462:	67 e4       	ldi	r22, 0x47	; 71
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     46a:	8f 3f       	cpi	r24, 0xFF	; 255
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	92 07       	cpc	r25, r18
     470:	71 f1       	breq	.+92     	; 0x4ce <setup_lis3dh+0x6c>

	// CTRL_REG2 (21h):
	// HPM1 HPM0 HPCF2 HPCF1 FDS HPCLICK HPIS2 HPIS1
	// CTRL_REG2: no filters
	USARTDbgSendStr("CTRL_REG2\n");
	if (lis3dh_write_byte(CTRL_REG2,0x00)==-1)
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	81 e2       	ldi	r24, 0x21	; 33
     476:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     47a:	8f 3f       	cpi	r24, 0xFF	; 255
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	94 07       	cpc	r25, r20
     480:	31 f1       	breq	.+76     	; 0x4ce <setup_lis3dh+0x6c>

	// CTRL_REG3 (22h):
	// I1_CLICK I1_AOI1 I1_AOI2 I1_DRDY1 I1_DRDY2 I1_WTM I1_OVERRUN --
	// CTRL_REG3: no interrupts
	USARTDbgSendStr("CTRL_REG3\n");
	if (lis3dh_write_byte(CTRL_REG3,0x00)==-1)
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	82 e2       	ldi	r24, 0x22	; 34
     486:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     48a:	8f 3f       	cpi	r24, 0xFF	; 255
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	92 07       	cpc	r25, r18
     490:	f1 f0       	breq	.+60     	; 0x4ce <setup_lis3dh+0x6c>

	// CTRL_REG4 (23h):
	// BDU BLE FS1 FS0 HR ST1 ST0 SIM
	// CTRL_REG4: BDU (Block data update), HR (High Resolution Output), 4G scale.
	USARTDbgSendStr("CTRL_REG4\n");
	if (lis3dh_write_byte(CTRL_REG4, 0x90)==-1)
     492:	60 e9       	ldi	r22, 0x90	; 144
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     49a:	8f 3f       	cpi	r24, 0xFF	; 255
     49c:	4f ef       	ldi	r20, 0xFF	; 255
     49e:	94 07       	cpc	r25, r20
     4a0:	b1 f0       	breq	.+44     	; 0x4ce <setup_lis3dh+0x6c>

	// CTRL_REG5 (24h)
	// BOOT FIFO_EN -- -- LIR_INT1 D4D_INT1 0 0
	// Normal mode, FIFO disabled
	USARTDbgSendStr("CTRL_REG5\n");
	if (lis3dh_write_byte(CTRL_REG5,0x00)==-1)
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	84 e2       	ldi	r24, 0x24	; 36
     4a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     4aa:	8f 3f       	cpi	r24, 0xFF	; 255
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	92 07       	cpc	r25, r18
     4b0:	71 f0       	breq	.+28     	; 0x4ce <setup_lis3dh+0x6c>

	// CTRL_REG6 (25h):
	// I2_CLICKen I2_INT1 0 BOOT_I1 0 - - H_LACTIVE -
	// All zero.
	USARTDbgSendStr("CTRL_REG6\n");
	if (lis3dh_write_byte(CTRL_REG6,0x00)==-1)
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	85 e2       	ldi	r24, 0x25	; 37
     4b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lis3dh_write_byte>
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <setup_lis3dh+0x64>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	88 27       	eor	r24, r24
     4c8:	99 27       	eor	r25, r25
     4ca:	82 1b       	sub	r24, r18
     4cc:	93 0b       	sbc	r25, r19
	return -1;
	return 0;
}
     4ce:	08 95       	ret

000004d0 <calcAcceleration>:
		}
	}
}

lis3dhacceleration calcAcceleration()
{
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
     4d4:	af 92       	push	r10
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <calcAcceleration+0x1a>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <calcAcceleration+0x1c>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <calcAcceleration+0x1e>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	8c 01       	movw	r16, r24
	lis3dhacceleration accel;
	uint8_t accelvalues[6];
	int i;
	/* Read sequentially the LIS3DH registers from OUT_X_L to OUT_Z_H in one single swallop using autoincrement */
	lis3dh_read_bytes(OUT_X_L | 0x80,6,accelvalues); /* 0x80 for autoincrement */
     4f4:	ae 01       	movw	r20, r28
     4f6:	4f 5f       	subi	r20, 0xFF	; 255
     4f8:	5f 4f       	sbci	r21, 0xFF	; 255
     4fa:	66 e0       	ldi	r22, 0x06	; 6
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	88 ea       	ldi	r24, 0xA8	; 168
     500:	0e 94 45 01 	call	0x28a	; 0x28a <lis3dh_read_bytes>
	/* Calculate acceleration for all 3 axis */
	for (i=0;i<6;i=i+2)
	{
	    /* Second byte is the high-byte in big endian order (could have been changed in CTRL_REG4) */
		int tempValue = (((int)accelvalues[i+1])<<8) + (int)accelvalues[i];
		float tempFloat = (float) tempValue / LIS3DH_RANGE_4_G_DIVIDER * SENSORS_GRAVITY_EARTH;
     504:	6c 81       	ldd	r22, Y+4	; 0x04
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	76 2f       	mov	r23, r22
     50a:	66 27       	eor	r22, r22
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	68 0f       	add	r22, r24
     510:	71 1d       	adc	r23, r1
     512:	07 2e       	mov	r0, r23
     514:	00 0c       	add	r0, r0
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__floatsisf>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 ef       	ldi	r19, 0xF0	; 240
     522:	4f ef       	ldi	r20, 0xFF	; 255
     524:	55 e4       	ldi	r21, 0x45	; 69
     526:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divsf3>
     52a:	2a e0       	ldi	r18, 0x0A	; 10
     52c:	38 ee       	ldi	r19, 0xE8	; 232
     52e:	4c e1       	ldi	r20, 0x1C	; 28
     530:	51 e4       	ldi	r21, 0x41	; 65
     532:	0e 94 8b 07 	call	0xf16	; 0xf16 <__mulsf3>
     536:	4b 01       	movw	r8, r22
     538:	5c 01       	movw	r10, r24
     53a:	6e 81       	ldd	r22, Y+6	; 0x06
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	76 2f       	mov	r23, r22
     540:	66 27       	eor	r22, r22
     542:	8d 81       	ldd	r24, Y+5	; 0x05
     544:	68 0f       	add	r22, r24
     546:	71 1d       	adc	r23, r1
     548:	07 2e       	mov	r0, r23
     54a:	00 0c       	add	r0, r0
     54c:	88 0b       	sbc	r24, r24
     54e:	99 0b       	sbc	r25, r25
     550:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__floatsisf>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 ef       	ldi	r19, 0xF0	; 240
     558:	4f ef       	ldi	r20, 0xFF	; 255
     55a:	55 e4       	ldi	r21, 0x45	; 69
     55c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divsf3>
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	38 ee       	ldi	r19, 0xE8	; 232
     564:	4c e1       	ldi	r20, 0x1C	; 28
     566:	51 e4       	ldi	r21, 0x41	; 65
     568:	0e 94 8b 07 	call	0xf16	; 0xf16 <__mulsf3>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
			case 4:
			accel.z_g = tempFloat;
			break;
		}
	}
	return accel;
     570:	6a 81       	ldd	r22, Y+2	; 0x02
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	76 2f       	mov	r23, r22
     576:	66 27       	eor	r22, r22
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	68 0f       	add	r22, r24
     57c:	71 1d       	adc	r23, r1
     57e:	07 2e       	mov	r0, r23
     580:	00 0c       	add	r0, r0
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__floatsisf>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 ef       	ldi	r19, 0xF0	; 240
     58e:	4f ef       	ldi	r20, 0xFF	; 255
     590:	55 e4       	ldi	r21, 0x45	; 69
     592:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divsf3>
     596:	2a e0       	ldi	r18, 0x0A	; 10
     598:	38 ee       	ldi	r19, 0xE8	; 232
     59a:	4c e1       	ldi	r20, 0x1C	; 28
     59c:	51 e4       	ldi	r21, 0x41	; 65
     59e:	0e 94 8b 07 	call	0xf16	; 0xf16 <__mulsf3>
     5a2:	f8 01       	movw	r30, r16
     5a4:	60 83       	st	Z, r22
     5a6:	71 83       	std	Z+1, r23	; 0x01
     5a8:	82 83       	std	Z+2, r24	; 0x02
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	84 82       	std	Z+4, r8	; 0x04
     5ae:	95 82       	std	Z+5, r9	; 0x05
     5b0:	a6 82       	std	Z+6, r10	; 0x06
     5b2:	b7 82       	std	Z+7, r11	; 0x07
     5b4:	c0 86       	std	Z+8, r12	; 0x08
     5b6:	d1 86       	std	Z+9, r13	; 0x09
     5b8:	e2 86       	std	Z+10, r14	; 0x0a
     5ba:	f3 86       	std	Z+11, r15	; 0x0b
}
     5bc:	c8 01       	movw	r24, r16
     5be:	26 96       	adiw	r28, 0x06	; 6
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	08 95       	ret

000005e4 <setup_rf>:


nRF24L01 *setup_rf(void) {
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29

	nRF24L01 *rf = nRF24L01_init();
     5e8:	0e 94 20 04 	call	0x840	; 0x840 <nRF24L01_init>
     5ec:	ec 01       	movw	r28, r24
	
	rf->ss.port = &PORTB;
     5ee:	85 e2       	ldi	r24, 0x25	; 37
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	99 83       	std	Y+1, r25	; 0x01
     5f4:	88 83       	st	Y, r24
	rf->ss.pin = PINB2;
     5f6:	22 e0       	ldi	r18, 0x02	; 2
     5f8:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
     5fa:	9c 83       	std	Y+4, r25	; 0x04
     5fc:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PINB1;
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	2d 83       	std	Y+5, r18	; 0x05

	rf->sck.port = &PORTB;
     602:	9f 83       	std	Y+7, r25	; 0x07
     604:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PINB5;
     606:	25 e0       	ldi	r18, 0x05	; 5
     608:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
     60a:	9a 87       	std	Y+10, r25	; 0x0a
     60c:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PINB3;
     60e:	23 e0       	ldi	r18, 0x03	; 3
     610:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
     612:	9d 87       	std	Y+13, r25	; 0x0d
     614:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PINB4;
     616:	84 e0       	ldi	r24, 0x04	; 4
     618:	8e 87       	std	Y+14, r24	; 0x0e
	EICRA |= (1<<ISC01); // Falling edge generates interrupt
     61a:	e9 e6       	ldi	r30, 0x69	; 105
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	82 60       	ori	r24, 0x02	; 2
     622:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); // Use INT0 (PD2)
     624:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
     626:	ce 01       	movw	r24, r28
     628:	0e 94 92 04 	call	0x924	; 0x924 <nRF24L01_begin>
	return rf;
}
     62c:	ce 01       	movw	r24, r28
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	8f 93       	push	r24
	rf_interrupt = true;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <rf_interrupt>
}
     646:	8f 91       	pop	r24
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <setup_timer>:

// setup timer to trigger interrupt every second when at 16MHz
void setup_timer(void) {
	TCCR1A = 0;
     652:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// set up timer with CTC mode and prescaling = 256
	TCCR1B |= (1 << WGM12)|(1 << CS12);
     656:	e1 e8       	ldi	r30, 0x81	; 129
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8c 60       	ori	r24, 0x0C	; 12
     65e:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
     660:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     664:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TimerCount=Requireddelay/period -1
	For example, for 1 sec delay -> TimerCount = 1/0.000016 -1 = 62499
	Let's consider this as the value for our delay.
	*/

	OCR1A = 62499; // value for 1 second delay
     668:	83 e2       	ldi	r24, 0x23	; 35
     66a:	94 ef       	ldi	r25, 0xF4	; 244
     66c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     670:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Enable compare interrupt
	TIMSK1 |= (1 << OCIE1A);
     674:	ef e6       	ldi	r30, 0x6F	; 111
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	82 60       	ori	r24, 0x02	; 2
     67c:	80 83       	st	Z, r24
     67e:	08 95       	ret

00000680 <main>:
volatile bool rf_interrupt = false;
volatile bool send_message = false;
char* tempTemplate = "TX: Values to send: x=%4.2f m/s^2 y=%4.2f m/s^2 z=%4.2f m/s^2\n";

int main(void)
{
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	c5 57       	subi	r28, 0x75	; 117
     69e:	d1 09       	sbc	r29, r1
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	lis3dhacceleration acceleration;
	uint8_t to_address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
     6aa:	85 e0       	ldi	r24, 0x05	; 5
     6ac:	e8 e0       	ldi	r30, 0x08	; 8
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	de 01       	movw	r26, r28
     6b2:	1d 96       	adiw	r26, 0x0d	; 13
     6b4:	01 90       	ld	r0, Z+
     6b6:	0d 92       	st	X+, r0
     6b8:	8a 95       	dec	r24
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x34>
	
	char printBuffer[64];

	nRF24L01 *rf = setup_rf();
     6bc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <setup_rf>
     6c0:	8c 01       	movw	r16, r24
	setup_timer();
     6c2:	0e 94 29 03 	call	0x652	; 0x652 <setup_timer>
	usart_init();
     6c6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <usart_init>
	i2c_init();
     6ca:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_init>

	/* Is there a LIS3DH? */
	uint8_t deviceid=0;
     6ce:	63 96       	adiw	r28, 0x13	; 19
     6d0:	1f ae       	std	Y+63, r1	; 0x3f
     6d2:	63 97       	sbiw	r28, 0x13	; 19
	lis3dh_read_bytes(WHO_AM_I, 1, &deviceid);
     6d4:	ae 01       	movw	r20, r28
     6d6:	4e 5a       	subi	r20, 0xAE	; 174
     6d8:	5f 4f       	sbci	r21, 0xFF	; 255
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	8f e0       	ldi	r24, 0x0F	; 15
     6e0:	0e 94 45 01 	call	0x28a	; 0x28a <lis3dh_read_bytes>
	if (deviceid != 0x33)
     6e4:	63 96       	adiw	r28, 0x13	; 19
     6e6:	8f ad       	ldd	r24, Y+63	; 0x3f
     6e8:	63 97       	sbiw	r28, 0x13	; 19
     6ea:	83 33       	cpi	r24, 0x33	; 51
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <main+0x70>
     6ee:	73 c0       	rjmp	.+230    	; 0x7d6 <main+0x156>
	{
		USARTSendStr("No LIS3DH detected!\n");
		return -1;
	}
	else
	USARTSendStr("LIS3DH is available\n");
     6f0:	82 e2       	ldi	r24, 0x22	; 34
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 67 06 	call	0xcce	; 0xcce <USARTSendStr>

	setup_lis3dh();
     6f8:	0e 94 31 02 	call	0x462	; 0x462 <setup_lis3dh>

	sei();
     6fc:	78 94       	sei

		if (send_message) {
			send_message = false;
			
			acceleration = calcAcceleration();
			sprintf(printBuffer, tempTemplate, acceleration.x_g, acceleration.y_g, acceleration.z_g);
     6fe:	6e 01       	movw	r12, r28
     700:	82 e1       	ldi	r24, 0x12	; 18
     702:	c8 0e       	add	r12, r24
     704:	d1 1c       	adc	r13, r1
			USARTSendStr(printBuffer);

			nRF24L01Message msg;
			memset(&msg,0,sizeof(msg));
     706:	7e 01       	movw	r14, r28
     708:	93 e5       	ldi	r25, 0x53	; 83
     70a:	e9 0e       	add	r14, r25
     70c:	f1 1c       	adc	r15, r1
     70e:	0f 2e       	mov	r0, r31
     710:	f3 e2       	ldi	r31, 0x23	; 35
     712:	8f 2e       	mov	r8, r31
     714:	f0 2d       	mov	r31, r0
			/* Copy the whole structure to be sent to receiver */
			memcpy(msg.data, &acceleration, sizeof(acceleration));
     716:	f7 01       	movw	r30, r14
     718:	32 96       	adiw	r30, 0x02	; 2
     71a:	5f 01       	movw	r10, r30
						
			msg.length = sizeof(acceleration) + 1;
     71c:	0f 2e       	mov	r0, r31
     71e:	fd e0       	ldi	r31, 0x0D	; 13
     720:	9f 2e       	mov	r9, r31
     722:	f0 2d       	mov	r31, r0
	setup_lis3dh();

	sei();
	while (1)
	{
		if (rf_interrupt) {
     724:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <rf_interrupt>
     728:	88 23       	and	r24, r24
     72a:	51 f0       	breq	.+20     	; 0x740 <main+0xc0>
			rf_interrupt = false;
     72c:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
     730:	c8 01       	movw	r24, r16
     732:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <nRF24L01_transmit_success>
			if (success != 0)
     736:	89 2b       	or	r24, r25
     738:	19 f0       	breq	.+6      	; 0x740 <main+0xc0>
			{
				nRF24L01_flush_transmit_message(rf);
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 77 04 	call	0x8ee	; 0x8ee <nRF24L01_flush_transmit_message>
			}
		}

		if (send_message) {
     740:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     744:	88 23       	and	r24, r24
     746:	71 f3       	breq	.-36     	; 0x724 <main+0xa4>
			send_message = false;
     748:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
			
			acceleration = calcAcceleration();
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 68 02 	call	0x4d0	; 0x4d0 <calcAcceleration>
			sprintf(printBuffer, tempTemplate, acceleration.x_g, acceleration.y_g, acceleration.z_g);
     754:	8c 85       	ldd	r24, Y+12	; 0x0c
     756:	8f 93       	push	r24
     758:	8b 85       	ldd	r24, Y+11	; 0x0b
     75a:	8f 93       	push	r24
     75c:	8a 85       	ldd	r24, Y+10	; 0x0a
     75e:	8f 93       	push	r24
     760:	89 85       	ldd	r24, Y+9	; 0x09
     762:	8f 93       	push	r24
     764:	88 85       	ldd	r24, Y+8	; 0x08
     766:	8f 93       	push	r24
     768:	8f 81       	ldd	r24, Y+7	; 0x07
     76a:	8f 93       	push	r24
     76c:	8e 81       	ldd	r24, Y+6	; 0x06
     76e:	8f 93       	push	r24
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	8f 93       	push	r24
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	8f 93       	push	r24
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	8f 93       	push	r24
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	8f 93       	push	r24
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	8f 93       	push	r24
     784:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tempTemplate+0x1>
     788:	8f 93       	push	r24
     78a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tempTemplate>
     78e:	8f 93       	push	r24
     790:	df 92       	push	r13
     792:	cf 92       	push	r12
     794:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sprintf>
			USARTSendStr(printBuffer);
     798:	c6 01       	movw	r24, r12
     79a:	0e 94 67 06 	call	0xcce	; 0xcce <USARTSendStr>

			nRF24L01Message msg;
			memset(&msg,0,sizeof(msg));
     79e:	f7 01       	movw	r30, r14
     7a0:	88 2d       	mov	r24, r8
     7a2:	11 92       	st	Z+, r1
     7a4:	8a 95       	dec	r24
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <main+0x122>
			/* Copy the whole structure to be sent to receiver */
			memcpy(msg.data, &acceleration, sizeof(acceleration));
     7a8:	8c e0       	ldi	r24, 0x0C	; 12
     7aa:	fe 01       	movw	r30, r28
     7ac:	31 96       	adiw	r30, 0x01	; 1
     7ae:	d5 01       	movw	r26, r10
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <main+0x130>
						
			msg.length = sizeof(acceleration) + 1;
     7b8:	f7 01       	movw	r30, r14
     7ba:	92 a2       	std	Z+34, r9	; 0x22
			nRF24L01_transmit(rf, to_address, &msg);
     7bc:	a7 01       	movw	r20, r14
     7be:	be 01       	movw	r22, r28
     7c0:	63 5f       	subi	r22, 0xF3	; 243
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 8a 05 	call	0xb14	; 0xb14 <nRF24L01_transmit>
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	a7 cf       	rjmp	.-178    	; 0x724 <main+0xa4>
	/* Is there a LIS3DH? */
	uint8_t deviceid=0;
	lis3dh_read_bytes(WHO_AM_I, 1, &deviceid);
	if (deviceid != 0x33)
	{
		USARTSendStr("No LIS3DH detected!\n");
     7d6:	8d e0       	ldi	r24, 0x0D	; 13
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 67 06 	call	0xcce	; 0xcce <USARTSendStr>
						
			msg.length = sizeof(acceleration) + 1;
			nRF24L01_transmit(rf, to_address, &msg);
		}
	}
}
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	cb 58       	subi	r28, 0x8B	; 139
     7e4:	df 4f       	sbci	r29, 0xFF	; 255
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	af 90       	pop	r10
     804:	9f 90       	pop	r9
     806:	8f 90       	pop	r8
     808:	08 95       	ret

0000080a <__vector_11>:
	// Enable compare interrupt
	TIMSK1 |= (1 << OCIE1A);
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	8f 93       	push	r24
	send_message = true;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
}
     81c:	8f 91       	pop	r24
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	0f 90       	pop	r0
     824:	1f 90       	pop	r1
     826:	18 95       	reti

00000828 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~(1<<PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     828:	fc 01       	movw	r30, r24
     82a:	a6 2f       	mov	r26, r22
     82c:	b7 2f       	mov	r27, r23
     82e:	9c 01       	movw	r18, r24
     830:	2b 5f       	subi	r18, 0xFB	; 251
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	91 91       	ld	r25, Z+
     836:	9d 93       	st	X+, r25
     838:	e2 17       	cp	r30, r18
     83a:	f3 07       	cpc	r31, r19
     83c:	d9 f7       	brne	.-10     	; 0x834 <copy_address+0xc>
     83e:	08 95       	ret

00000840 <nRF24L01_init>:
     840:	80 e1       	ldi	r24, 0x10	; 16
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 ac 0b 	call	0x1758	; 0x1758 <malloc>
     848:	20 e1       	ldi	r18, 0x10	; 16
     84a:	fc 01       	movw	r30, r24
     84c:	11 92       	st	Z+, r1
     84e:	2a 95       	dec	r18
     850:	e9 f7       	brne	.-6      	; 0x84c <nRF24L01_init+0xc>
     852:	08 95       	ret

00000854 <nRF24L01_send_command>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
     85a:	da 01       	movw	r26, r20
     85c:	e8 81       	ld	r30, Y
     85e:	f9 81       	ldd	r31, Y+1	; 0x01
     860:	50 81       	ld	r21, Z
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0a 80       	ldd	r0, Y+2	; 0x02
     868:	02 c0       	rjmp	.+4      	; 0x86e <nRF24L01_send_command+0x1a>
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	0a 94       	dec	r0
     870:	e2 f7       	brpl	.-8      	; 0x86a <nRF24L01_send_command+0x16>
     872:	80 95       	com	r24
     874:	85 23       	and	r24, r21
     876:	80 83       	st	Z, r24
     878:	6e bd       	out	0x2e, r22	; 46
     87a:	0d b4       	in	r0, 0x2d	; 45
     87c:	07 fe       	sbrs	r0, 7
     87e:	fd cf       	rjmp	.-6      	; 0x87a <nRF24L01_send_command+0x26>
     880:	8e b5       	in	r24, 0x2e	; 46
     882:	8f 87       	std	Y+15, r24	; 0x0f
     884:	21 15       	cp	r18, r1
     886:	31 05       	cpc	r19, r1
     888:	79 f0       	breq	.+30     	; 0x8a8 <nRF24L01_send_command+0x54>
     88a:	fd 01       	movw	r30, r26
     88c:	2a 0f       	add	r18, r26
     88e:	3b 1f       	adc	r19, r27
     890:	df 01       	movw	r26, r30
     892:	90 81       	ld	r25, Z
     894:	9e bd       	out	0x2e, r25	; 46
     896:	0d b4       	in	r0, 0x2d	; 45
     898:	07 fe       	sbrs	r0, 7
     89a:	fd cf       	rjmp	.-6      	; 0x896 <nRF24L01_send_command+0x42>
     89c:	9e b5       	in	r25, 0x2e	; 46
     89e:	9c 93       	st	X, r25
     8a0:	31 96       	adiw	r30, 0x01	; 1
     8a2:	e2 17       	cp	r30, r18
     8a4:	f3 07       	cpc	r31, r19
     8a6:	a1 f7       	brne	.-24     	; 0x890 <nRF24L01_send_command+0x3c>
     8a8:	e8 81       	ld	r30, Y
     8aa:	f9 81       	ldd	r31, Y+1	; 0x01
     8ac:	20 81       	ld	r18, Z
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0a 80       	ldd	r0, Y+2	; 0x02
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <nRF24L01_send_command+0x66>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <nRF24L01_send_command+0x62>
     8be:	82 2b       	or	r24, r18
     8c0:	80 83       	st	Z, r24
     8c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <nRF24L01_write_register>:
     8ca:	60 62       	ori	r22, 0x20	; 32
     8cc:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
     8d0:	08 95       	ret

000008d2 <nRF24L01_read_register>:
     8d2:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
     8d6:	08 95       	ret

000008d8 <nRF24L01_no_op>:
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	6f ef       	ldi	r22, 0xFF	; 255
     8e2:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
     8e6:	08 95       	ret

000008e8 <nRF24L01_update_status>:
     8e8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nRF24L01_no_op>
     8ec:	08 95       	ret

000008ee <nRF24L01_flush_transmit_message>:
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	61 ee       	ldi	r22, 0xE1	; 225
     8f8:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
     8fc:	08 95       	ret

000008fe <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	1f 92       	push	r1
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT);
     908:	20 e7       	ldi	r18, 0x70	; 112
     90a:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	ae 01       	movw	r20, r28
     912:	4f 5f       	subi	r20, 0xFF	; 255
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	67 e0       	ldi	r22, 0x07	; 7
     918:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
}
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	1f 92       	push	r1
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= (1<<pin.pin);
     936:	dc 01       	movw	r26, r24
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	11 97       	sbiw	r26, 0x01	; 1
     93e:	42 91       	ld	r20, -Z
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9c 01       	movw	r18, r24
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	0c 90       	ld	r0, X
     94a:	12 97       	sbiw	r26, 0x02	; 2
     94c:	02 c0       	rjmp	.+4      	; 0x952 <nRF24L01_begin+0x2e>
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <nRF24L01_begin+0x2a>
     956:	24 2b       	or	r18, r20
     958:	20 83       	st	Z, r18
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	14 97       	sbiw	r26, 0x04	; 4
     962:	42 91       	ld	r20, -Z
     964:	9c 01       	movw	r18, r24
     966:	15 96       	adiw	r26, 0x05	; 5
     968:	0c 90       	ld	r0, X
     96a:	15 97       	sbiw	r26, 0x05	; 5
     96c:	02 c0       	rjmp	.+4      	; 0x972 <nRF24L01_begin+0x4e>
     96e:	22 0f       	add	r18, r18
     970:	33 1f       	adc	r19, r19
     972:	0a 94       	dec	r0
     974:	e2 f7       	brpl	.-8      	; 0x96e <nRF24L01_begin+0x4a>
     976:	24 2b       	or	r18, r20
     978:	20 83       	st	Z, r18
     97a:	ed 91       	ld	r30, X+
     97c:	fc 91       	ld	r31, X
     97e:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~(1<<pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= (1<<pin.pin);
     980:	40 81       	ld	r20, Z
     982:	9c 01       	movw	r18, r24
     984:	12 96       	adiw	r26, 0x02	; 2
     986:	0c 90       	ld	r0, X
     988:	12 97       	sbiw	r26, 0x02	; 2
     98a:	02 c0       	rjmp	.+4      	; 0x990 <nRF24L01_begin+0x6c>
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	0a 94       	dec	r0
     992:	e2 f7       	brpl	.-8      	; 0x98c <nRF24L01_begin+0x68>
     994:	24 2b       	or	r18, r20
     996:	20 83       	st	Z, r18
     998:	13 96       	adiw	r26, 0x03	; 3
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~(1<<pin.pin);
     9a0:	30 81       	ld	r19, Z
     9a2:	ac 01       	movw	r20, r24
     9a4:	15 96       	adiw	r26, 0x05	; 5
     9a6:	0c 90       	ld	r0, X
     9a8:	15 97       	sbiw	r26, 0x05	; 5
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <nRF24L01_begin+0x8c>
     9ac:	44 0f       	add	r20, r20
     9ae:	55 1f       	adc	r21, r21
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <nRF24L01_begin+0x88>
     9b4:	24 2f       	mov	r18, r20
     9b6:	20 95       	com	r18
     9b8:	23 23       	and	r18, r19
     9ba:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= (1<<MSTR);
     9bc:	2c b5       	in	r18, 0x2c	; 44
     9be:	20 61       	ori	r18, 0x10	; 16
     9c0:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= (1<<SPE);
     9c2:	2c b5       	in	r18, 0x2c	; 44
     9c4:	20 64       	ori	r18, 0x40	; 64
     9c6:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= (1<<pin.pin);
     9c8:	16 96       	adiw	r26, 0x06	; 6
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X
     9ce:	17 97       	sbiw	r26, 0x07	; 7
     9d0:	42 91       	ld	r20, -Z
     9d2:	9c 01       	movw	r18, r24
     9d4:	18 96       	adiw	r26, 0x08	; 8
     9d6:	0c 90       	ld	r0, X
     9d8:	18 97       	sbiw	r26, 0x08	; 8
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <nRF24L01_begin+0xbc>
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	0a 94       	dec	r0
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <nRF24L01_begin+0xb8>
     9e4:	24 2b       	or	r18, r20
     9e6:	20 83       	st	Z, r18
     9e8:	19 96       	adiw	r26, 0x09	; 9
     9ea:	ed 91       	ld	r30, X+
     9ec:	fc 91       	ld	r31, X
     9ee:	1a 97       	sbiw	r26, 0x0a	; 10
     9f0:	42 91       	ld	r20, -Z
     9f2:	9c 01       	movw	r18, r24
     9f4:	1b 96       	adiw	r26, 0x0b	; 11
     9f6:	0c 90       	ld	r0, X
     9f8:	1b 97       	sbiw	r26, 0x0b	; 11
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <nRF24L01_begin+0xdc>
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	0a 94       	dec	r0
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <nRF24L01_begin+0xd8>
     a04:	24 2b       	or	r18, r20
     a06:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~(1<<pin.pin);
     a08:	1c 96       	adiw	r26, 0x0c	; 12
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	1d 97       	sbiw	r26, 0x0d	; 13
     a10:	22 91       	ld	r18, -Z
     a12:	1e 96       	adiw	r26, 0x0e	; 14
     a14:	0c 90       	ld	r0, X
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <nRF24L01_begin+0xf8>
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	0a 94       	dec	r0
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <nRF24L01_begin+0xf4>
     a20:	80 95       	com	r24
     a22:	82 23       	and	r24, r18
     a24:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~(1<<CPOL);
     a26:	8c b5       	in	r24, 0x2c	; 44
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<CPHA);
     a2c:	8c b5       	in	r24, 0x2c	; 44
     a2e:	8b 7f       	andi	r24, 0xFB	; 251
     a30:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~(1<<SPR0);
     a32:	8c b5       	in	r24, 0x2c	; 44
     a34:	8e 7f       	andi	r24, 0xFE	; 254
     a36:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<SPR1);
     a38:	8c b5       	in	r24, 0x2c	; 44
     a3a:	8d 7f       	andi	r24, 0xFD	; 253
     a3c:	8c bd       	out	0x2c, r24	; 44
    SPSR|= (1<<SPI2X);
     a3e:	8d b5       	in	r24, 0x2d	; 45
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~(1<<DORD);
     a44:	8c b5       	in	r24, 0x2c	; 44
     a46:	8f 7d       	andi	r24, 0xDF	; 223
     a48:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	62 ee       	ldi	r22, 0xE2	; 226
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	61 ee       	ldi	r22, 0xE1	; 225
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
     a6a:	c8 01       	movw	r24, r16
     a6c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nRF24L01_clear_interrupts>

    uint8_t data;
    data = (1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP) | (1<<PRIM_RX);
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	ae 01       	movw	r20, r28
     a7a:	4f 5f       	subi	r20, 0xFF	; 255
     a7c:	5f 4f       	sbci	r21, 0xFF	; 255
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = (1<<ENAA_P0) | (1<<ENAA_P1) | (1<<ENAA_P2)
     a86:	0f 2e       	mov	r0, r31
     a88:	ff e3       	ldi	r31, 0x3F	; 63
     a8a:	ff 2e       	mov	r15, r31
     a8c:	f0 2d       	mov	r31, r0
     a8e:	f9 82       	std	Y+1, r15	; 0x01
         | (1<<ENAA_P3) | (1<<ENAA_P4) | (1<<ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	ae 01       	movw	r20, r28
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>

    // enable Dynamic Payload on all pipes
    data = (1<<DPL_P0) | (1<<DPL_P1) | (1<<DPL_P2)
     aa2:	f9 82       	std	Y+1, r15	; 0x01
         | (1<<DPL_P3) | (1<<DPL_P4) | (1<<DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	ae 01       	movw	r20, r28
     aaa:	4f 5f       	subi	r20, 0xFF	; 255
     aac:	5f 4f       	sbci	r21, 0xFF	; 255
     aae:	6c e1       	ldi	r22, 0x1C	; 28
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = (1<<EN_DPL);
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	ae 01       	movw	r20, r28
     ac0:	4f 5f       	subi	r20, 0xFF	; 255
     ac2:	5f 4f       	sbci	r21, 0xFF	; 255
     ac4:	6d e1       	ldi	r22, 0x1D	; 29
     ac6:	c8 01       	movw	r24, r16
     ac8:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
     acc:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	ae 01       	movw	r20, r28
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	62 e0       	ldi	r22, 0x02	; 2
     ada:	c8 01       	movw	r24, r16
     adc:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
}
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	08 95       	ret

00000aee <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	1f 92       	push	r1
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = (1<<TX_DS) | (1<<MAX_RT);
     af8:	20 e3       	ldi	r18, 0x30	; 48
     afa:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	ae 01       	movw	r20, r28
     b02:	4f 5f       	subi	r20, 0xFF	; 255
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	67 e0       	ldi	r22, 0x07	; 7
     b08:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
}
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	00 d0       	rcall	.+0      	; 0xb26 <nRF24L01_transmit+0x12>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <nRF24L01_transmit+0x14>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <nRF24L01_transmit+0x16>
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	8c 01       	movw	r16, r24
     b30:	6b 01       	movw	r12, r22
     b32:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
     b34:	0e 94 77 05 	call	0xaee	; 0xaee <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	c6 01       	movw	r24, r12
     b40:	0e 94 14 04 	call	0x828	; 0x828 <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
     b44:	25 e0       	ldi	r18, 0x05	; 5
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	ae 01       	movw	r20, r28
     b4a:	4f 5f       	subi	r20, 0xFF	; 255
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
     b56:	be 01       	movw	r22, r28
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	c6 01       	movw	r24, r12
     b5e:	0e 94 14 04 	call	0x828	; 0x828 <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
     b62:	25 e0       	ldi	r18, 0x05	; 5
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	ae 01       	movw	r20, r28
     b68:	4f 5f       	subi	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	6a e0       	ldi	r22, 0x0A	; 10
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
     b74:	d7 01       	movw	r26, r14
     b76:	92 96       	adiw	r26, 0x22	; 34
     b78:	2c 91       	ld	r18, X
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	a7 01       	movw	r20, r14
     b7e:	4e 5f       	subi	r20, 0xFE	; 254
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	60 ea       	ldi	r22, 0xA0	; 160
     b84:	c8 01       	movw	r24, r16
     b86:	0e 94 2a 04 	call	0x854	; 0x854 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	ae 01       	movw	r20, r28
     b90:	4a 5f       	subi	r20, 0xFA	; 250
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nRF24L01_read_register>
    config &= ~(1<<PRIM_RX);
     b9c:	8e 81       	ldd	r24, Y+6	; 0x06
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	ae 01       	movw	r20, r28
     ba8:	4a 5f       	subi	r20, 0xFA	; 250
     baa:	5f 4f       	sbci	r21, 0xFF	; 255
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	c8 01       	movw	r24, r16
     bb0:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
     bb4:	d8 01       	movw	r26, r16
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	ed 91       	ld	r30, X+
     bba:	fc 91       	ld	r31, X
     bbc:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~(1<<pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= (1<<pin.pin);
     bbe:	20 81       	ld	r18, Z
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	15 96       	adiw	r26, 0x05	; 5
     bc6:	0c 90       	ld	r0, X
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <nRF24L01_transmit+0xba>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <nRF24L01_transmit+0xb6>
     bd2:	82 2b       	or	r24, r18
     bd4:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~(1<<PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     bd6:	26 96       	adiw	r28, 0x06	; 6
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	08 95       	ret

00000bf4 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	8c 01       	movw	r16, r24
     c08:	dc 01       	movw	r26, r24
     c0a:	13 96       	adiw	r26, 0x03	; 3
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= (1<<pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~(1<<pin.pin);
     c12:	20 81       	ld	r18, Z
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	15 96       	adiw	r26, 0x05	; 5
     c1a:	0c 90       	ld	r0, X
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <nRF24L01_transmit_success+0x2e>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <nRF24L01_transmit_success+0x2a>
     c26:	80 95       	com	r24
     c28:	82 23       	and	r24, r18
     c2a:	80 83       	st	Z, r24
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
	
    nRF24L01_update_status(rf);
     c2c:	c8 01       	movw	r24, r16
     c2e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <nRF24L01_update_status>
    int success;
    if (rf->status & (1<<TX_DS)) success = 0;
     c32:	f8 01       	movw	r30, r16
     c34:	87 85       	ldd	r24, Z+15	; 0x0f
     c36:	85 fd       	sbrc	r24, 5
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <nRF24L01_transmit_success+0x58>
    else if (rf->status & (1<<MAX_RT)) success = -1;
     c3a:	84 fd       	sbrc	r24, 4
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <nRF24L01_transmit_success+0x5e>
    else success = -2;
     c3e:	0f 2e       	mov	r0, r31
     c40:	fe ef       	ldi	r31, 0xFE	; 254
     c42:	ef 2e       	mov	r14, r31
     c44:	ff 24       	eor	r15, r15
     c46:	fa 94       	dec	r15
     c48:	f0 2d       	mov	r31, r0
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <nRF24L01_transmit_success+0x64>
int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
	
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & (1<<TX_DS)) success = 0;
     c4c:	e1 2c       	mov	r14, r1
     c4e:	f1 2c       	mov	r15, r1
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <nRF24L01_transmit_success+0x64>
    else if (rf->status & (1<<MAX_RT)) success = -1;
     c52:	ee 24       	eor	r14, r14
     c54:	ea 94       	dec	r14
     c56:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
     c58:	c8 01       	movw	r24, r16
     c5a:	0e 94 77 05 	call	0xaee	; 0xaee <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	ae 01       	movw	r20, r28
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nRF24L01_read_register>
    config |= (1<<PRIM_RX);
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	ae 01       	movw	r20, r28
     c7c:	4f 5f       	subi	r20, 0xFF	; 255
     c7e:	5f 4f       	sbci	r21, 0xFF	; 255
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	c8 01       	movw	r24, r16
     c84:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01_write_register>
    return success;
}
     c88:	c7 01       	movw	r24, r14
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	08 95       	ret

00000c9a <usart_init>:

 #include "usart.h"

 void usart_init()
 {
	 UBRR0H = (MYUBRR) >> 8;
     c9a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = MYUBRR;
     c9e:	87 e6       	ldi	r24, 0x67	; 103
     ca0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 UCSR0B |= (1 << TXEN0); // Enable transmitter
     ca4:	e1 ec       	ldi	r30, 0xC1	; 193
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	80 83       	st	Z, r24
	 UCSR0C |=  (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop
     cae:	e2 ec       	ldi	r30, 0xC2	; 194
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	86 60       	ori	r24, 0x06	; 6
     cb6:	80 83       	st	Z, r24
     cb8:	08 95       	ret

00000cba <USART0SendByte>:
 }

 int USART0SendByte(char u8Data)
 {
	 //wait while previous byte is completed
	 while(!(UCSR0A&(1<<UDRE0))){};
     cba:	e0 ec       	ldi	r30, 0xC0	; 192
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	90 81       	ld	r25, Z
     cc0:	95 ff       	sbrs	r25, 5
     cc2:	fd cf       	rjmp	.-6      	; 0xcbe <USART0SendByte+0x4>
	 // Transmit data
	 UDR0=u8Data;
     cc4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 return 0;
 }
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	08 95       	ret

00000cce <USARTSendStr>:

 void USARTSendStr(char* _str)
 {
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
	 int thesize=strlen(_str);
     cd8:	fc 01       	movw	r30, r24
     cda:	01 90       	ld	r0, Z+
     cdc:	00 20       	and	r0, r0
     cde:	e9 f7       	brne	.-6      	; 0xcda <USARTSendStr+0xc>
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	8f 01       	movw	r16, r30
     ce4:	08 1b       	sub	r16, r24
     ce6:	19 0b       	sbc	r17, r25
	 for (uint8_t i=0; i<thesize;i++)
     ce8:	10 16       	cp	r1, r16
     cea:	11 06       	cpc	r1, r17
     cec:	74 f4       	brge	.+28     	; 0xd0a <USARTSendStr+0x3c>
     cee:	7c 01       	movw	r14, r24
     cf0:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		 USART0SendByte(_str[i]);
     cf2:	f7 01       	movw	r30, r14
     cf4:	ec 0f       	add	r30, r28
     cf6:	f1 1d       	adc	r31, r1
     cf8:	80 81       	ld	r24, Z
     cfa:	0e 94 5d 06 	call	0xcba	; 0xcba <USART0SendByte>
 }

 void USARTSendStr(char* _str)
 {
	 int thesize=strlen(_str);
	 for (uint8_t i=0; i<thesize;i++)
     cfe:	cf 5f       	subi	r28, 0xFF	; 255
     d00:	2c 2f       	mov	r18, r28
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	20 17       	cp	r18, r16
     d06:	31 07       	cpc	r19, r17
     d08:	a4 f3       	brlt	.-24     	; 0xcf2 <USARTSendStr+0x24>
	 {
		 USART0SendByte(_str[i]);
	 }
 }
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	08 95       	ret

00000d16 <__divsf3>:
     d16:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__divsf3x>
     d1a:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_round>
     d1e:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_pscB>
     d22:	58 f0       	brcs	.+22     	; 0xd3a <__divsf3+0x24>
     d24:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_pscA>
     d28:	40 f0       	brcs	.+16     	; 0xd3a <__divsf3+0x24>
     d2a:	29 f4       	brne	.+10     	; 0xd36 <__divsf3+0x20>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	29 f0       	breq	.+10     	; 0xd3a <__divsf3+0x24>
     d30:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_inf>
     d34:	51 11       	cpse	r21, r1
     d36:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__fp_szero>
     d3a:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__fp_nan>

00000d3e <__divsf3x>:
     d3e:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_split3>
     d42:	68 f3       	brcs	.-38     	; 0xd1e <__divsf3+0x8>

00000d44 <__divsf3_pse>:
     d44:	99 23       	and	r25, r25
     d46:	b1 f3       	breq	.-20     	; 0xd34 <__divsf3+0x1e>
     d48:	55 23       	and	r21, r21
     d4a:	91 f3       	breq	.-28     	; 0xd30 <__divsf3+0x1a>
     d4c:	95 1b       	sub	r25, r21
     d4e:	55 0b       	sbc	r21, r21
     d50:	bb 27       	eor	r27, r27
     d52:	aa 27       	eor	r26, r26
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	38 f0       	brcs	.+14     	; 0xd6a <__divsf3_pse+0x26>
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	44 1f       	adc	r20, r20
     d66:	aa 1f       	adc	r26, r26
     d68:	a9 f3       	breq	.-22     	; 0xd54 <__divsf3_pse+0x10>
     d6a:	35 d0       	rcall	.+106    	; 0xdd6 <__divsf3_pse+0x92>
     d6c:	0e 2e       	mov	r0, r30
     d6e:	3a f0       	brmi	.+14     	; 0xd7e <__divsf3_pse+0x3a>
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	32 d0       	rcall	.+100    	; 0xdd8 <__divsf3_pse+0x94>
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	e6 95       	lsr	r30
     d7a:	00 1c       	adc	r0, r0
     d7c:	ca f7       	brpl	.-14     	; 0xd70 <__divsf3_pse+0x2c>
     d7e:	2b d0       	rcall	.+86     	; 0xdd6 <__divsf3_pse+0x92>
     d80:	fe 2f       	mov	r31, r30
     d82:	29 d0       	rcall	.+82     	; 0xdd6 <__divsf3_pse+0x92>
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	bb 1f       	adc	r27, r27
     d8c:	26 17       	cp	r18, r22
     d8e:	37 07       	cpc	r19, r23
     d90:	48 07       	cpc	r20, r24
     d92:	ab 07       	cpc	r26, r27
     d94:	b0 e8       	ldi	r27, 0x80	; 128
     d96:	09 f0       	breq	.+2      	; 0xd9a <__divsf3_pse+0x56>
     d98:	bb 0b       	sbc	r27, r27
     d9a:	80 2d       	mov	r24, r0
     d9c:	bf 01       	movw	r22, r30
     d9e:	ff 27       	eor	r31, r31
     da0:	93 58       	subi	r25, 0x83	; 131
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	3a f0       	brmi	.+14     	; 0xdb4 <__divsf3_pse+0x70>
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	51 05       	cpc	r21, r1
     daa:	78 f0       	brcs	.+30     	; 0xdca <__divsf3_pse+0x86>
     dac:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_inf>
     db0:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__fp_szero>
     db4:	5f 3f       	cpi	r21, 0xFF	; 255
     db6:	e4 f3       	brlt	.-8      	; 0xdb0 <__divsf3_pse+0x6c>
     db8:	98 3e       	cpi	r25, 0xE8	; 232
     dba:	d4 f3       	brlt	.-12     	; 0xdb0 <__divsf3_pse+0x6c>
     dbc:	86 95       	lsr	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b7 95       	ror	r27
     dc4:	f7 95       	ror	r31
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	c9 f7       	brne	.-14     	; 0xdbc <__divsf3_pse+0x78>
     dca:	88 0f       	add	r24, r24
     dcc:	91 1d       	adc	r25, r1
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	97 f9       	bld	r25, 7
     dd4:	08 95       	ret
     dd6:	e1 e0       	ldi	r30, 0x01	; 1
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	bb 1f       	adc	r27, r27
     de0:	62 17       	cp	r22, r18
     de2:	73 07       	cpc	r23, r19
     de4:	84 07       	cpc	r24, r20
     de6:	ba 07       	cpc	r27, r26
     de8:	20 f0       	brcs	.+8      	; 0xdf2 <__divsf3_pse+0xae>
     dea:	62 1b       	sub	r22, r18
     dec:	73 0b       	sbc	r23, r19
     dee:	84 0b       	sbc	r24, r20
     df0:	ba 0b       	sbc	r27, r26
     df2:	ee 1f       	adc	r30, r30
     df4:	88 f7       	brcc	.-30     	; 0xdd8 <__divsf3_pse+0x94>
     df6:	e0 95       	com	r30
     df8:	08 95       	ret

00000dfa <__floatunsisf>:
     dfa:	e8 94       	clt
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <__floatsisf+0x12>

00000dfe <__floatsisf>:
     dfe:	97 fb       	bst	r25, 7
     e00:	3e f4       	brtc	.+14     	; 0xe10 <__floatsisf+0x12>
     e02:	90 95       	com	r25
     e04:	80 95       	com	r24
     e06:	70 95       	com	r23
     e08:	61 95       	neg	r22
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	8f 4f       	sbci	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	99 23       	and	r25, r25
     e12:	a9 f0       	breq	.+42     	; 0xe3e <__floatsisf+0x40>
     e14:	f9 2f       	mov	r31, r25
     e16:	96 e9       	ldi	r25, 0x96	; 150
     e18:	bb 27       	eor	r27, r27
     e1a:	93 95       	inc	r25
     e1c:	f6 95       	lsr	r31
     e1e:	87 95       	ror	r24
     e20:	77 95       	ror	r23
     e22:	67 95       	ror	r22
     e24:	b7 95       	ror	r27
     e26:	f1 11       	cpse	r31, r1
     e28:	f8 cf       	rjmp	.-16     	; 0xe1a <__floatsisf+0x1c>
     e2a:	fa f4       	brpl	.+62     	; 0xe6a <__floatsisf+0x6c>
     e2c:	bb 0f       	add	r27, r27
     e2e:	11 f4       	brne	.+4      	; 0xe34 <__floatsisf+0x36>
     e30:	60 ff       	sbrs	r22, 0
     e32:	1b c0       	rjmp	.+54     	; 0xe6a <__floatsisf+0x6c>
     e34:	6f 5f       	subi	r22, 0xFF	; 255
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	8f 4f       	sbci	r24, 0xFF	; 255
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <__floatsisf+0x6c>
     e3e:	88 23       	and	r24, r24
     e40:	11 f0       	breq	.+4      	; 0xe46 <__floatsisf+0x48>
     e42:	96 e9       	ldi	r25, 0x96	; 150
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <__floatsisf+0x6a>
     e46:	77 23       	and	r23, r23
     e48:	21 f0       	breq	.+8      	; 0xe52 <__floatsisf+0x54>
     e4a:	9e e8       	ldi	r25, 0x8E	; 142
     e4c:	87 2f       	mov	r24, r23
     e4e:	76 2f       	mov	r23, r22
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <__floatsisf+0x5e>
     e52:	66 23       	and	r22, r22
     e54:	71 f0       	breq	.+28     	; 0xe72 <__floatsisf+0x74>
     e56:	96 e8       	ldi	r25, 0x86	; 134
     e58:	86 2f       	mov	r24, r22
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	2a f0       	brmi	.+10     	; 0xe6a <__floatsisf+0x6c>
     e60:	9a 95       	dec	r25
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	88 1f       	adc	r24, r24
     e68:	da f7       	brpl	.-10     	; 0xe60 <__floatsisf+0x62>
     e6a:	88 0f       	add	r24, r24
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	97 f9       	bld	r25, 7
     e72:	08 95       	ret

00000e74 <__fp_inf>:
     e74:	97 f9       	bld	r25, 7
     e76:	9f 67       	ori	r25, 0x7F	; 127
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	08 95       	ret

00000e80 <__fp_nan>:
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	80 ec       	ldi	r24, 0xC0	; 192
     e84:	08 95       	ret

00000e86 <__fp_pscA>:
     e86:	00 24       	eor	r0, r0
     e88:	0a 94       	dec	r0
     e8a:	16 16       	cp	r1, r22
     e8c:	17 06       	cpc	r1, r23
     e8e:	18 06       	cpc	r1, r24
     e90:	09 06       	cpc	r0, r25
     e92:	08 95       	ret

00000e94 <__fp_pscB>:
     e94:	00 24       	eor	r0, r0
     e96:	0a 94       	dec	r0
     e98:	12 16       	cp	r1, r18
     e9a:	13 06       	cpc	r1, r19
     e9c:	14 06       	cpc	r1, r20
     e9e:	05 06       	cpc	r0, r21
     ea0:	08 95       	ret

00000ea2 <__fp_round>:
     ea2:	09 2e       	mov	r0, r25
     ea4:	03 94       	inc	r0
     ea6:	00 0c       	add	r0, r0
     ea8:	11 f4       	brne	.+4      	; 0xeae <__fp_round+0xc>
     eaa:	88 23       	and	r24, r24
     eac:	52 f0       	brmi	.+20     	; 0xec2 <__fp_round+0x20>
     eae:	bb 0f       	add	r27, r27
     eb0:	40 f4       	brcc	.+16     	; 0xec2 <__fp_round+0x20>
     eb2:	bf 2b       	or	r27, r31
     eb4:	11 f4       	brne	.+4      	; 0xeba <__fp_round+0x18>
     eb6:	60 ff       	sbrs	r22, 0
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <__fp_round+0x20>
     eba:	6f 5f       	subi	r22, 0xFF	; 255
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	08 95       	ret

00000ec4 <__fp_split3>:
     ec4:	57 fd       	sbrc	r21, 7
     ec6:	90 58       	subi	r25, 0x80	; 128
     ec8:	44 0f       	add	r20, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	59 f0       	breq	.+22     	; 0xee4 <__fp_splitA+0x10>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	71 f0       	breq	.+28     	; 0xeee <__fp_splitA+0x1a>
     ed2:	47 95       	ror	r20

00000ed4 <__fp_splitA>:
     ed4:	88 0f       	add	r24, r24
     ed6:	97 fb       	bst	r25, 7
     ed8:	99 1f       	adc	r25, r25
     eda:	61 f0       	breq	.+24     	; 0xef4 <__fp_splitA+0x20>
     edc:	9f 3f       	cpi	r25, 0xFF	; 255
     ede:	79 f0       	breq	.+30     	; 0xefe <__fp_splitA+0x2a>
     ee0:	87 95       	ror	r24
     ee2:	08 95       	ret
     ee4:	12 16       	cp	r1, r18
     ee6:	13 06       	cpc	r1, r19
     ee8:	14 06       	cpc	r1, r20
     eea:	55 1f       	adc	r21, r21
     eec:	f2 cf       	rjmp	.-28     	; 0xed2 <__fp_split3+0xe>
     eee:	46 95       	lsr	r20
     ef0:	f1 df       	rcall	.-30     	; 0xed4 <__fp_splitA>
     ef2:	08 c0       	rjmp	.+16     	; 0xf04 <__fp_splitA+0x30>
     ef4:	16 16       	cp	r1, r22
     ef6:	17 06       	cpc	r1, r23
     ef8:	18 06       	cpc	r1, r24
     efa:	99 1f       	adc	r25, r25
     efc:	f1 cf       	rjmp	.-30     	; 0xee0 <__fp_splitA+0xc>
     efe:	86 95       	lsr	r24
     f00:	71 05       	cpc	r23, r1
     f02:	61 05       	cpc	r22, r1
     f04:	08 94       	sec
     f06:	08 95       	ret

00000f08 <__fp_zero>:
     f08:	e8 94       	clt

00000f0a <__fp_szero>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	66 27       	eor	r22, r22
     f0e:	77 27       	eor	r23, r23
     f10:	cb 01       	movw	r24, r22
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret

00000f16 <__mulsf3>:
     f16:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__mulsf3x>
     f1a:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_round>
     f1e:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_pscA>
     f22:	38 f0       	brcs	.+14     	; 0xf32 <__mulsf3+0x1c>
     f24:	0e 94 4a 07 	call	0xe94	; 0xe94 <__fp_pscB>
     f28:	20 f0       	brcs	.+8      	; 0xf32 <__mulsf3+0x1c>
     f2a:	95 23       	and	r25, r21
     f2c:	11 f0       	breq	.+4      	; 0xf32 <__mulsf3+0x1c>
     f2e:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_inf>
     f32:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__fp_nan>
     f36:	11 24       	eor	r1, r1
     f38:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__fp_szero>

00000f3c <__mulsf3x>:
     f3c:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_split3>
     f40:	70 f3       	brcs	.-36     	; 0xf1e <__mulsf3+0x8>

00000f42 <__mulsf3_pse>:
     f42:	95 9f       	mul	r25, r21
     f44:	c1 f3       	breq	.-16     	; 0xf36 <__mulsf3+0x20>
     f46:	95 0f       	add	r25, r21
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	55 1f       	adc	r21, r21
     f4c:	62 9f       	mul	r22, r18
     f4e:	f0 01       	movw	r30, r0
     f50:	72 9f       	mul	r23, r18
     f52:	bb 27       	eor	r27, r27
     f54:	f0 0d       	add	r31, r0
     f56:	b1 1d       	adc	r27, r1
     f58:	63 9f       	mul	r22, r19
     f5a:	aa 27       	eor	r26, r26
     f5c:	f0 0d       	add	r31, r0
     f5e:	b1 1d       	adc	r27, r1
     f60:	aa 1f       	adc	r26, r26
     f62:	64 9f       	mul	r22, r20
     f64:	66 27       	eor	r22, r22
     f66:	b0 0d       	add	r27, r0
     f68:	a1 1d       	adc	r26, r1
     f6a:	66 1f       	adc	r22, r22
     f6c:	82 9f       	mul	r24, r18
     f6e:	22 27       	eor	r18, r18
     f70:	b0 0d       	add	r27, r0
     f72:	a1 1d       	adc	r26, r1
     f74:	62 1f       	adc	r22, r18
     f76:	73 9f       	mul	r23, r19
     f78:	b0 0d       	add	r27, r0
     f7a:	a1 1d       	adc	r26, r1
     f7c:	62 1f       	adc	r22, r18
     f7e:	83 9f       	mul	r24, r19
     f80:	a0 0d       	add	r26, r0
     f82:	61 1d       	adc	r22, r1
     f84:	22 1f       	adc	r18, r18
     f86:	74 9f       	mul	r23, r20
     f88:	33 27       	eor	r19, r19
     f8a:	a0 0d       	add	r26, r0
     f8c:	61 1d       	adc	r22, r1
     f8e:	23 1f       	adc	r18, r19
     f90:	84 9f       	mul	r24, r20
     f92:	60 0d       	add	r22, r0
     f94:	21 1d       	adc	r18, r1
     f96:	82 2f       	mov	r24, r18
     f98:	76 2f       	mov	r23, r22
     f9a:	6a 2f       	mov	r22, r26
     f9c:	11 24       	eor	r1, r1
     f9e:	9f 57       	subi	r25, 0x7F	; 127
     fa0:	50 40       	sbci	r21, 0x00	; 0
     fa2:	9a f0       	brmi	.+38     	; 0xfca <__mulsf3_pse+0x88>
     fa4:	f1 f0       	breq	.+60     	; 0xfe2 <__mulsf3_pse+0xa0>
     fa6:	88 23       	and	r24, r24
     fa8:	4a f0       	brmi	.+18     	; 0xfbc <__mulsf3_pse+0x7a>
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	bb 1f       	adc	r27, r27
     fb0:	66 1f       	adc	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	91 50       	subi	r25, 0x01	; 1
     fb8:	50 40       	sbci	r21, 0x00	; 0
     fba:	a9 f7       	brne	.-22     	; 0xfa6 <__mulsf3_pse+0x64>
     fbc:	9e 3f       	cpi	r25, 0xFE	; 254
     fbe:	51 05       	cpc	r21, r1
     fc0:	80 f0       	brcs	.+32     	; 0xfe2 <__mulsf3_pse+0xa0>
     fc2:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_inf>
     fc6:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__fp_szero>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	e4 f3       	brlt	.-8      	; 0xfc6 <__mulsf3_pse+0x84>
     fce:	98 3e       	cpi	r25, 0xE8	; 232
     fd0:	d4 f3       	brlt	.-12     	; 0xfc6 <__mulsf3_pse+0x84>
     fd2:	86 95       	lsr	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b7 95       	ror	r27
     fda:	f7 95       	ror	r31
     fdc:	e7 95       	ror	r30
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	c1 f7       	brne	.-16     	; 0xfd2 <__mulsf3_pse+0x90>
     fe2:	fe 2b       	or	r31, r30
     fe4:	88 0f       	add	r24, r24
     fe6:	91 1d       	adc	r25, r1
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret

00000ff0 <vfprintf>:
     ff0:	a0 e1       	ldi	r26, 0x10	; 16
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee ef       	ldi	r30, 0xFE	; 254
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__prologue_saves__>
     ffc:	7c 01       	movw	r14, r24
     ffe:	1b 01       	movw	r2, r22
    1000:	6a 01       	movw	r12, r20
    1002:	fc 01       	movw	r30, r24
    1004:	17 82       	std	Z+7, r1	; 0x07
    1006:	16 82       	std	Z+6, r1	; 0x06
    1008:	83 81       	ldd	r24, Z+3	; 0x03
    100a:	81 ff       	sbrs	r24, 1
    100c:	44 c3       	rjmp	.+1672   	; 0x1696 <vfprintf+0x6a6>
    100e:	9e 01       	movw	r18, r28
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	39 01       	movw	r6, r18
    1016:	f7 01       	movw	r30, r14
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	f1 01       	movw	r30, r2
    101c:	93 fd       	sbrc	r25, 3
    101e:	85 91       	lpm	r24, Z+
    1020:	93 ff       	sbrs	r25, 3
    1022:	81 91       	ld	r24, Z+
    1024:	1f 01       	movw	r2, r30
    1026:	88 23       	and	r24, r24
    1028:	09 f4       	brne	.+2      	; 0x102c <vfprintf+0x3c>
    102a:	31 c3       	rjmp	.+1634   	; 0x168e <vfprintf+0x69e>
    102c:	85 32       	cpi	r24, 0x25	; 37
    102e:	39 f4       	brne	.+14     	; 0x103e <vfprintf+0x4e>
    1030:	93 fd       	sbrc	r25, 3
    1032:	85 91       	lpm	r24, Z+
    1034:	93 ff       	sbrs	r25, 3
    1036:	81 91       	ld	r24, Z+
    1038:	1f 01       	movw	r2, r30
    103a:	85 32       	cpi	r24, 0x25	; 37
    103c:	39 f4       	brne	.+14     	; 0x104c <vfprintf+0x5c>
    103e:	b7 01       	movw	r22, r14
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1046:	56 01       	movw	r10, r12
    1048:	65 01       	movw	r12, r10
    104a:	e5 cf       	rjmp	.-54     	; 0x1016 <vfprintf+0x26>
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	51 2c       	mov	r5, r1
    1050:	91 2c       	mov	r9, r1
    1052:	ff e1       	ldi	r31, 0x1F	; 31
    1054:	f9 15       	cp	r31, r9
    1056:	d8 f0       	brcs	.+54     	; 0x108e <vfprintf+0x9e>
    1058:	8b 32       	cpi	r24, 0x2B	; 43
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0x8a>
    105c:	38 f4       	brcc	.+14     	; 0x106c <vfprintf+0x7c>
    105e:	80 32       	cpi	r24, 0x20	; 32
    1060:	79 f0       	breq	.+30     	; 0x1080 <vfprintf+0x90>
    1062:	83 32       	cpi	r24, 0x23	; 35
    1064:	a1 f4       	brne	.+40     	; 0x108e <vfprintf+0x9e>
    1066:	f9 2d       	mov	r31, r9
    1068:	f0 61       	ori	r31, 0x10	; 16
    106a:	2e c0       	rjmp	.+92     	; 0x10c8 <vfprintf+0xd8>
    106c:	8d 32       	cpi	r24, 0x2D	; 45
    106e:	61 f0       	breq	.+24     	; 0x1088 <vfprintf+0x98>
    1070:	80 33       	cpi	r24, 0x30	; 48
    1072:	69 f4       	brne	.+26     	; 0x108e <vfprintf+0x9e>
    1074:	29 2d       	mov	r18, r9
    1076:	21 60       	ori	r18, 0x01	; 1
    1078:	2d c0       	rjmp	.+90     	; 0x10d4 <vfprintf+0xe4>
    107a:	39 2d       	mov	r19, r9
    107c:	32 60       	ori	r19, 0x02	; 2
    107e:	93 2e       	mov	r9, r19
    1080:	89 2d       	mov	r24, r9
    1082:	84 60       	ori	r24, 0x04	; 4
    1084:	98 2e       	mov	r9, r24
    1086:	2a c0       	rjmp	.+84     	; 0x10dc <vfprintf+0xec>
    1088:	e9 2d       	mov	r30, r9
    108a:	e8 60       	ori	r30, 0x08	; 8
    108c:	15 c0       	rjmp	.+42     	; 0x10b8 <vfprintf+0xc8>
    108e:	97 fc       	sbrc	r9, 7
    1090:	2d c0       	rjmp	.+90     	; 0x10ec <vfprintf+0xfc>
    1092:	20 ed       	ldi	r18, 0xD0	; 208
    1094:	28 0f       	add	r18, r24
    1096:	2a 30       	cpi	r18, 0x0A	; 10
    1098:	88 f4       	brcc	.+34     	; 0x10bc <vfprintf+0xcc>
    109a:	96 fe       	sbrs	r9, 6
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <vfprintf+0xba>
    109e:	3a e0       	ldi	r19, 0x0A	; 10
    10a0:	13 9f       	mul	r17, r19
    10a2:	20 0d       	add	r18, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	12 2f       	mov	r17, r18
    10a8:	19 c0       	rjmp	.+50     	; 0x10dc <vfprintf+0xec>
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	58 9e       	mul	r5, r24
    10ae:	20 0d       	add	r18, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	52 2e       	mov	r5, r18
    10b4:	e9 2d       	mov	r30, r9
    10b6:	e0 62       	ori	r30, 0x20	; 32
    10b8:	9e 2e       	mov	r9, r30
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <vfprintf+0xec>
    10bc:	8e 32       	cpi	r24, 0x2E	; 46
    10be:	31 f4       	brne	.+12     	; 0x10cc <vfprintf+0xdc>
    10c0:	96 fc       	sbrc	r9, 6
    10c2:	e5 c2       	rjmp	.+1482   	; 0x168e <vfprintf+0x69e>
    10c4:	f9 2d       	mov	r31, r9
    10c6:	f0 64       	ori	r31, 0x40	; 64
    10c8:	9f 2e       	mov	r9, r31
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <vfprintf+0xec>
    10cc:	8c 36       	cpi	r24, 0x6C	; 108
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <vfprintf+0xe8>
    10d0:	29 2d       	mov	r18, r9
    10d2:	20 68       	ori	r18, 0x80	; 128
    10d4:	92 2e       	mov	r9, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0xec>
    10d8:	88 36       	cpi	r24, 0x68	; 104
    10da:	41 f4       	brne	.+16     	; 0x10ec <vfprintf+0xfc>
    10dc:	f1 01       	movw	r30, r2
    10de:	93 fd       	sbrc	r25, 3
    10e0:	85 91       	lpm	r24, Z+
    10e2:	93 ff       	sbrs	r25, 3
    10e4:	81 91       	ld	r24, Z+
    10e6:	1f 01       	movw	r2, r30
    10e8:	81 11       	cpse	r24, r1
    10ea:	b3 cf       	rjmp	.-154    	; 0x1052 <vfprintf+0x62>
    10ec:	9b eb       	ldi	r25, 0xBB	; 187
    10ee:	98 0f       	add	r25, r24
    10f0:	93 30       	cpi	r25, 0x03	; 3
    10f2:	20 f4       	brcc	.+8      	; 0x10fc <vfprintf+0x10c>
    10f4:	99 2d       	mov	r25, r9
    10f6:	90 61       	ori	r25, 0x10	; 16
    10f8:	80 5e       	subi	r24, 0xE0	; 224
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <vfprintf+0x11a>
    10fc:	9b e9       	ldi	r25, 0x9B	; 155
    10fe:	98 0f       	add	r25, r24
    1100:	93 30       	cpi	r25, 0x03	; 3
    1102:	08 f0       	brcs	.+2      	; 0x1106 <vfprintf+0x116>
    1104:	66 c1       	rjmp	.+716    	; 0x13d2 <vfprintf+0x3e2>
    1106:	99 2d       	mov	r25, r9
    1108:	9f 7e       	andi	r25, 0xEF	; 239
    110a:	96 ff       	sbrs	r25, 6
    110c:	16 e0       	ldi	r17, 0x06	; 6
    110e:	9f 73       	andi	r25, 0x3F	; 63
    1110:	99 2e       	mov	r9, r25
    1112:	85 36       	cpi	r24, 0x65	; 101
    1114:	19 f4       	brne	.+6      	; 0x111c <vfprintf+0x12c>
    1116:	90 64       	ori	r25, 0x40	; 64
    1118:	99 2e       	mov	r9, r25
    111a:	08 c0       	rjmp	.+16     	; 0x112c <vfprintf+0x13c>
    111c:	86 36       	cpi	r24, 0x66	; 102
    111e:	21 f4       	brne	.+8      	; 0x1128 <vfprintf+0x138>
    1120:	39 2f       	mov	r19, r25
    1122:	30 68       	ori	r19, 0x80	; 128
    1124:	93 2e       	mov	r9, r19
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x13c>
    1128:	11 11       	cpse	r17, r1
    112a:	11 50       	subi	r17, 0x01	; 1
    112c:	97 fe       	sbrs	r9, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x14e>
    1130:	1c 33       	cpi	r17, 0x3C	; 60
    1132:	50 f4       	brcc	.+20     	; 0x1148 <vfprintf+0x158>
    1134:	44 24       	eor	r4, r4
    1136:	43 94       	inc	r4
    1138:	41 0e       	add	r4, r17
    113a:	27 e0       	ldi	r18, 0x07	; 7
    113c:	0b c0       	rjmp	.+22     	; 0x1154 <vfprintf+0x164>
    113e:	18 30       	cpi	r17, 0x08	; 8
    1140:	38 f0       	brcs	.+14     	; 0x1150 <vfprintf+0x160>
    1142:	27 e0       	ldi	r18, 0x07	; 7
    1144:	17 e0       	ldi	r17, 0x07	; 7
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <vfprintf+0x162>
    1148:	27 e0       	ldi	r18, 0x07	; 7
    114a:	9c e3       	ldi	r25, 0x3C	; 60
    114c:	49 2e       	mov	r4, r25
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <vfprintf+0x164>
    1150:	21 2f       	mov	r18, r17
    1152:	41 2c       	mov	r4, r1
    1154:	56 01       	movw	r10, r12
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	a8 0e       	add	r10, r24
    115a:	b1 1c       	adc	r11, r1
    115c:	f6 01       	movw	r30, r12
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	04 2d       	mov	r16, r4
    1168:	a3 01       	movw	r20, r6
    116a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__ftoa_engine>
    116e:	6c 01       	movw	r12, r24
    1170:	f9 81       	ldd	r31, Y+1	; 0x01
    1172:	fc 87       	std	Y+12, r31	; 0x0c
    1174:	f0 ff       	sbrs	r31, 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x18c>
    1178:	f3 ff       	sbrs	r31, 3
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x198>
    117c:	91 fc       	sbrc	r9, 1
    117e:	06 c0       	rjmp	.+12     	; 0x118c <vfprintf+0x19c>
    1180:	92 fe       	sbrs	r9, 2
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <vfprintf+0x1a0>
    1184:	00 e2       	ldi	r16, 0x20	; 32
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <vfprintf+0x1a2>
    1188:	0d e2       	ldi	r16, 0x2D	; 45
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <vfprintf+0x1a2>
    118c:	0b e2       	ldi	r16, 0x2B	; 43
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <vfprintf+0x1a2>
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	8c 85       	ldd	r24, Y+12	; 0x0c
    1194:	8c 70       	andi	r24, 0x0C	; 12
    1196:	19 f0       	breq	.+6      	; 0x119e <vfprintf+0x1ae>
    1198:	01 11       	cpse	r16, r1
    119a:	5a c2       	rjmp	.+1204   	; 0x1650 <vfprintf+0x660>
    119c:	9b c2       	rjmp	.+1334   	; 0x16d4 <vfprintf+0x6e4>
    119e:	97 fe       	sbrs	r9, 7
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <vfprintf+0x1d2>
    11a2:	4c 0c       	add	r4, r12
    11a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    11a6:	f4 ff       	sbrs	r31, 4
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <vfprintf+0x1c2>
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	81 33       	cpi	r24, 0x31	; 49
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x1c2>
    11b0:	4a 94       	dec	r4
    11b2:	14 14       	cp	r1, r4
    11b4:	74 f5       	brge	.+92     	; 0x1212 <vfprintf+0x222>
    11b6:	28 e0       	ldi	r18, 0x08	; 8
    11b8:	24 15       	cp	r18, r4
    11ba:	78 f5       	brcc	.+94     	; 0x121a <vfprintf+0x22a>
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	48 2e       	mov	r4, r24
    11c0:	2c c0       	rjmp	.+88     	; 0x121a <vfprintf+0x22a>
    11c2:	96 fc       	sbrc	r9, 6
    11c4:	2a c0       	rjmp	.+84     	; 0x121a <vfprintf+0x22a>
    11c6:	81 2f       	mov	r24, r17
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	8c 15       	cp	r24, r12
    11cc:	9d 05       	cpc	r25, r13
    11ce:	9c f0       	brlt	.+38     	; 0x11f6 <vfprintf+0x206>
    11d0:	3c ef       	ldi	r19, 0xFC	; 252
    11d2:	c3 16       	cp	r12, r19
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	d3 06       	cpc	r13, r19
    11d8:	74 f0       	brlt	.+28     	; 0x11f6 <vfprintf+0x206>
    11da:	89 2d       	mov	r24, r9
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	98 2e       	mov	r9, r24
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <vfprintf+0x206>
    11e2:	e2 e0       	ldi	r30, 0x02	; 2
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	ec 0f       	add	r30, r28
    11e8:	fd 1f       	adc	r31, r29
    11ea:	e1 0f       	add	r30, r17
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	80 33       	cpi	r24, 0x30	; 48
    11f2:	19 f4       	brne	.+6      	; 0x11fa <vfprintf+0x20a>
    11f4:	11 50       	subi	r17, 0x01	; 1
    11f6:	11 11       	cpse	r17, r1
    11f8:	f4 cf       	rjmp	.-24     	; 0x11e2 <vfprintf+0x1f2>
    11fa:	97 fe       	sbrs	r9, 7
    11fc:	0e c0       	rjmp	.+28     	; 0x121a <vfprintf+0x22a>
    11fe:	44 24       	eor	r4, r4
    1200:	43 94       	inc	r4
    1202:	41 0e       	add	r4, r17
    1204:	81 2f       	mov	r24, r17
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	c8 16       	cp	r12, r24
    120a:	d9 06       	cpc	r13, r25
    120c:	2c f4       	brge	.+10     	; 0x1218 <vfprintf+0x228>
    120e:	1c 19       	sub	r17, r12
    1210:	04 c0       	rjmp	.+8      	; 0x121a <vfprintf+0x22a>
    1212:	44 24       	eor	r4, r4
    1214:	43 94       	inc	r4
    1216:	01 c0       	rjmp	.+2      	; 0x121a <vfprintf+0x22a>
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	97 fe       	sbrs	r9, 7
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfprintf+0x23a>
    121e:	1c 14       	cp	r1, r12
    1220:	1d 04       	cpc	r1, r13
    1222:	34 f4       	brge	.+12     	; 0x1230 <vfprintf+0x240>
    1224:	c6 01       	movw	r24, r12
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <vfprintf+0x244>
    122a:	85 e0       	ldi	r24, 0x05	; 5
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x244>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	01 11       	cpse	r16, r1
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	11 23       	and	r17, r17
    123a:	31 f0       	breq	.+12     	; 0x1248 <vfprintf+0x258>
    123c:	21 2f       	mov	r18, r17
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	25 2d       	mov	r18, r5
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	82 17       	cp	r24, r18
    124e:	93 07       	cpc	r25, r19
    1250:	14 f4       	brge	.+4      	; 0x1256 <vfprintf+0x266>
    1252:	58 1a       	sub	r5, r24
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <vfprintf+0x268>
    1256:	51 2c       	mov	r5, r1
    1258:	89 2d       	mov	r24, r9
    125a:	89 70       	andi	r24, 0x09	; 9
    125c:	49 f4       	brne	.+18     	; 0x1270 <vfprintf+0x280>
    125e:	55 20       	and	r5, r5
    1260:	39 f0       	breq	.+14     	; 0x1270 <vfprintf+0x280>
    1262:	b7 01       	movw	r22, r14
    1264:	80 e2       	ldi	r24, 0x20	; 32
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    126c:	5a 94       	dec	r5
    126e:	f7 cf       	rjmp	.-18     	; 0x125e <vfprintf+0x26e>
    1270:	00 23       	and	r16, r16
    1272:	29 f0       	breq	.+10     	; 0x127e <vfprintf+0x28e>
    1274:	b7 01       	movw	r22, r14
    1276:	80 2f       	mov	r24, r16
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    127e:	93 fc       	sbrc	r9, 3
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <vfprintf+0x2a4>
    1282:	55 20       	and	r5, r5
    1284:	39 f0       	breq	.+14     	; 0x1294 <vfprintf+0x2a4>
    1286:	b7 01       	movw	r22, r14
    1288:	80 e3       	ldi	r24, 0x30	; 48
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1290:	5a 94       	dec	r5
    1292:	f7 cf       	rjmp	.-18     	; 0x1282 <vfprintf+0x292>
    1294:	97 fe       	sbrs	r9, 7
    1296:	4c c0       	rjmp	.+152    	; 0x1330 <vfprintf+0x340>
    1298:	46 01       	movw	r8, r12
    129a:	d7 fe       	sbrs	r13, 7
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0x2b2>
    129e:	81 2c       	mov	r8, r1
    12a0:	91 2c       	mov	r9, r1
    12a2:	c6 01       	movw	r24, r12
    12a4:	88 19       	sub	r24, r8
    12a6:	99 09       	sbc	r25, r9
    12a8:	f3 01       	movw	r30, r6
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	fe 87       	std	Y+14, r31	; 0x0e
    12b0:	ed 87       	std	Y+13, r30	; 0x0d
    12b2:	96 01       	movw	r18, r12
    12b4:	24 19       	sub	r18, r4
    12b6:	31 09       	sbc	r19, r1
    12b8:	38 8b       	std	Y+16, r19	; 0x10
    12ba:	2f 87       	std	Y+15, r18	; 0x0f
    12bc:	01 2f       	mov	r16, r17
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	11 95       	neg	r17
    12c2:	01 95       	neg	r16
    12c4:	11 09       	sbc	r17, r1
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	83 16       	cp	r8, r19
    12ca:	93 06       	cpc	r9, r19
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <vfprintf+0x2e8>
    12ce:	b7 01       	movw	r22, r14
    12d0:	8e e2       	ldi	r24, 0x2E	; 46
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    12d8:	c8 14       	cp	r12, r8
    12da:	d9 04       	cpc	r13, r9
    12dc:	4c f0       	brlt	.+18     	; 0x12f0 <vfprintf+0x300>
    12de:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e0:	98 89       	ldd	r25, Y+16	; 0x10
    12e2:	88 15       	cp	r24, r8
    12e4:	99 05       	cpc	r25, r9
    12e6:	24 f4       	brge	.+8      	; 0x12f0 <vfprintf+0x300>
    12e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    12ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <vfprintf+0x302>
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	8f 1a       	sub	r8, r31
    12f6:	91 08       	sbc	r9, r1
    12f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    12fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	3e 87       	std	Y+14, r19	; 0x0e
    1302:	2d 87       	std	Y+13, r18	; 0x0d
    1304:	80 16       	cp	r8, r16
    1306:	91 06       	cpc	r9, r17
    1308:	2c f0       	brlt	.+10     	; 0x1314 <vfprintf+0x324>
    130a:	b7 01       	movw	r22, r14
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1312:	d9 cf       	rjmp	.-78     	; 0x12c6 <vfprintf+0x2d6>
    1314:	c8 14       	cp	r12, r8
    1316:	d9 04       	cpc	r13, r9
    1318:	41 f4       	brne	.+16     	; 0x132a <vfprintf+0x33a>
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	96 33       	cpi	r25, 0x36	; 54
    131e:	20 f4       	brcc	.+8      	; 0x1328 <vfprintf+0x338>
    1320:	95 33       	cpi	r25, 0x35	; 53
    1322:	19 f4       	brne	.+6      	; 0x132a <vfprintf+0x33a>
    1324:	3c 85       	ldd	r19, Y+12	; 0x0c
    1326:	34 ff       	sbrs	r19, 4
    1328:	81 e3       	ldi	r24, 0x31	; 49
    132a:	b7 01       	movw	r22, r14
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	4e c0       	rjmp	.+156    	; 0x13cc <vfprintf+0x3dc>
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	81 33       	cpi	r24, 0x31	; 49
    1334:	19 f0       	breq	.+6      	; 0x133c <vfprintf+0x34c>
    1336:	9c 85       	ldd	r25, Y+12	; 0x0c
    1338:	9f 7e       	andi	r25, 0xEF	; 239
    133a:	9c 87       	std	Y+12, r25	; 0x0c
    133c:	b7 01       	movw	r22, r14
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1344:	11 11       	cpse	r17, r1
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <vfprintf+0x362>
    1348:	94 fc       	sbrc	r9, 4
    134a:	18 c0       	rjmp	.+48     	; 0x137c <vfprintf+0x38c>
    134c:	85 e6       	ldi	r24, 0x65	; 101
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	17 c0       	rjmp	.+46     	; 0x1380 <vfprintf+0x390>
    1352:	b7 01       	movw	r22, r14
    1354:	8e e2       	ldi	r24, 0x2E	; 46
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    135c:	1e 5f       	subi	r17, 0xFE	; 254
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	01 e0       	ldi	r16, 0x01	; 1
    1362:	08 0f       	add	r16, r24
    1364:	f3 01       	movw	r30, r6
    1366:	e8 0f       	add	r30, r24
    1368:	f1 1d       	adc	r31, r1
    136a:	80 81       	ld	r24, Z
    136c:	b7 01       	movw	r22, r14
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1374:	80 2f       	mov	r24, r16
    1376:	01 13       	cpse	r16, r17
    1378:	f3 cf       	rjmp	.-26     	; 0x1360 <vfprintf+0x370>
    137a:	e6 cf       	rjmp	.-52     	; 0x1348 <vfprintf+0x358>
    137c:	85 e4       	ldi	r24, 0x45	; 69
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b7 01       	movw	r22, r14
    1382:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1386:	d7 fc       	sbrc	r13, 7
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <vfprintf+0x3a6>
    138a:	c1 14       	cp	r12, r1
    138c:	d1 04       	cpc	r13, r1
    138e:	41 f4       	brne	.+16     	; 0x13a0 <vfprintf+0x3b0>
    1390:	ec 85       	ldd	r30, Y+12	; 0x0c
    1392:	e4 ff       	sbrs	r30, 4
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <vfprintf+0x3b0>
    1396:	d1 94       	neg	r13
    1398:	c1 94       	neg	r12
    139a:	d1 08       	sbc	r13, r1
    139c:	8d e2       	ldi	r24, 0x2D	; 45
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <vfprintf+0x3b2>
    13a0:	8b e2       	ldi	r24, 0x2B	; 43
    13a2:	b7 01       	movw	r22, r14
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    13aa:	80 e3       	ldi	r24, 0x30	; 48
    13ac:	2a e0       	ldi	r18, 0x0A	; 10
    13ae:	c2 16       	cp	r12, r18
    13b0:	d1 04       	cpc	r13, r1
    13b2:	2c f0       	brlt	.+10     	; 0x13be <vfprintf+0x3ce>
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	fa e0       	ldi	r31, 0x0A	; 10
    13b8:	cf 1a       	sub	r12, r31
    13ba:	d1 08       	sbc	r13, r1
    13bc:	f7 cf       	rjmp	.-18     	; 0x13ac <vfprintf+0x3bc>
    13be:	b7 01       	movw	r22, r14
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    13c6:	b7 01       	movw	r22, r14
    13c8:	c6 01       	movw	r24, r12
    13ca:	c0 96       	adiw	r24, 0x30	; 48
    13cc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    13d0:	54 c1       	rjmp	.+680    	; 0x167a <vfprintf+0x68a>
    13d2:	83 36       	cpi	r24, 0x63	; 99
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <vfprintf+0x3f2>
    13d6:	83 37       	cpi	r24, 0x73	; 115
    13d8:	79 f0       	breq	.+30     	; 0x13f8 <vfprintf+0x408>
    13da:	83 35       	cpi	r24, 0x53	; 83
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <vfprintf+0x3f0>
    13de:	56 c0       	rjmp	.+172    	; 0x148c <vfprintf+0x49c>
    13e0:	20 c0       	rjmp	.+64     	; 0x1422 <vfprintf+0x432>
    13e2:	56 01       	movw	r10, r12
    13e4:	32 e0       	ldi	r19, 0x02	; 2
    13e6:	a3 0e       	add	r10, r19
    13e8:	b1 1c       	adc	r11, r1
    13ea:	f6 01       	movw	r30, r12
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	01 e0       	ldi	r16, 0x01	; 1
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	63 01       	movw	r12, r6
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <vfprintf+0x42c>
    13f8:	56 01       	movw	r10, r12
    13fa:	f2 e0       	ldi	r31, 0x02	; 2
    13fc:	af 0e       	add	r10, r31
    13fe:	b1 1c       	adc	r11, r1
    1400:	f6 01       	movw	r30, r12
    1402:	c0 80       	ld	r12, Z
    1404:	d1 80       	ldd	r13, Z+1	; 0x01
    1406:	96 fe       	sbrs	r9, 6
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <vfprintf+0x420>
    140a:	61 2f       	mov	r22, r17
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x424>
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	7f ef       	ldi	r23, 0xFF	; 255
    1414:	c6 01       	movw	r24, r12
    1416:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <strnlen>
    141a:	8c 01       	movw	r16, r24
    141c:	f9 2d       	mov	r31, r9
    141e:	ff 77       	andi	r31, 0x7F	; 127
    1420:	14 c0       	rjmp	.+40     	; 0x144a <vfprintf+0x45a>
    1422:	56 01       	movw	r10, r12
    1424:	22 e0       	ldi	r18, 0x02	; 2
    1426:	a2 0e       	add	r10, r18
    1428:	b1 1c       	adc	r11, r1
    142a:	f6 01       	movw	r30, r12
    142c:	c0 80       	ld	r12, Z
    142e:	d1 80       	ldd	r13, Z+1	; 0x01
    1430:	96 fe       	sbrs	r9, 6
    1432:	03 c0       	rjmp	.+6      	; 0x143a <vfprintf+0x44a>
    1434:	61 2f       	mov	r22, r17
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <vfprintf+0x44e>
    143a:	6f ef       	ldi	r22, 0xFF	; 255
    143c:	7f ef       	ldi	r23, 0xFF	; 255
    143e:	c6 01       	movw	r24, r12
    1440:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <strnlen_P>
    1444:	8c 01       	movw	r16, r24
    1446:	f9 2d       	mov	r31, r9
    1448:	f0 68       	ori	r31, 0x80	; 128
    144a:	9f 2e       	mov	r9, r31
    144c:	f3 fd       	sbrc	r31, 3
    144e:	1a c0       	rjmp	.+52     	; 0x1484 <vfprintf+0x494>
    1450:	85 2d       	mov	r24, r5
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	08 17       	cp	r16, r24
    1456:	19 07       	cpc	r17, r25
    1458:	a8 f4       	brcc	.+42     	; 0x1484 <vfprintf+0x494>
    145a:	b7 01       	movw	r22, r14
    145c:	80 e2       	ldi	r24, 0x20	; 32
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1464:	5a 94       	dec	r5
    1466:	f4 cf       	rjmp	.-24     	; 0x1450 <vfprintf+0x460>
    1468:	f6 01       	movw	r30, r12
    146a:	97 fc       	sbrc	r9, 7
    146c:	85 91       	lpm	r24, Z+
    146e:	97 fe       	sbrs	r9, 7
    1470:	81 91       	ld	r24, Z+
    1472:	6f 01       	movw	r12, r30
    1474:	b7 01       	movw	r22, r14
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    147c:	51 10       	cpse	r5, r1
    147e:	5a 94       	dec	r5
    1480:	01 50       	subi	r16, 0x01	; 1
    1482:	11 09       	sbc	r17, r1
    1484:	01 15       	cp	r16, r1
    1486:	11 05       	cpc	r17, r1
    1488:	79 f7       	brne	.-34     	; 0x1468 <vfprintf+0x478>
    148a:	f7 c0       	rjmp	.+494    	; 0x167a <vfprintf+0x68a>
    148c:	84 36       	cpi	r24, 0x64	; 100
    148e:	11 f0       	breq	.+4      	; 0x1494 <vfprintf+0x4a4>
    1490:	89 36       	cpi	r24, 0x69	; 105
    1492:	61 f5       	brne	.+88     	; 0x14ec <vfprintf+0x4fc>
    1494:	56 01       	movw	r10, r12
    1496:	97 fe       	sbrs	r9, 7
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <vfprintf+0x4bc>
    149a:	24 e0       	ldi	r18, 0x04	; 4
    149c:	a2 0e       	add	r10, r18
    149e:	b1 1c       	adc	r11, r1
    14a0:	f6 01       	movw	r30, r12
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	0a c0       	rjmp	.+20     	; 0x14c0 <vfprintf+0x4d0>
    14ac:	f2 e0       	ldi	r31, 0x02	; 2
    14ae:	af 0e       	add	r10, r31
    14b0:	b1 1c       	adc	r11, r1
    14b2:	f6 01       	movw	r30, r12
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	07 2e       	mov	r0, r23
    14ba:	00 0c       	add	r0, r0
    14bc:	88 0b       	sbc	r24, r24
    14be:	99 0b       	sbc	r25, r25
    14c0:	f9 2d       	mov	r31, r9
    14c2:	ff 76       	andi	r31, 0x6F	; 111
    14c4:	9f 2e       	mov	r9, r31
    14c6:	97 ff       	sbrs	r25, 7
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <vfprintf+0x4ec>
    14ca:	90 95       	com	r25
    14cc:	80 95       	com	r24
    14ce:	70 95       	com	r23
    14d0:	61 95       	neg	r22
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	8f 4f       	sbci	r24, 0xFF	; 255
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	f0 68       	ori	r31, 0x80	; 128
    14da:	9f 2e       	mov	r9, r31
    14dc:	2a e0       	ldi	r18, 0x0A	; 10
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a3 01       	movw	r20, r6
    14e2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    14e6:	c8 2e       	mov	r12, r24
    14e8:	c6 18       	sub	r12, r6
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <vfprintf+0x57a>
    14ec:	09 2d       	mov	r16, r9
    14ee:	85 37       	cpi	r24, 0x75	; 117
    14f0:	21 f4       	brne	.+8      	; 0x14fa <vfprintf+0x50a>
    14f2:	0f 7e       	andi	r16, 0xEF	; 239
    14f4:	2a e0       	ldi	r18, 0x0A	; 10
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	1d c0       	rjmp	.+58     	; 0x1534 <vfprintf+0x544>
    14fa:	09 7f       	andi	r16, 0xF9	; 249
    14fc:	8f 36       	cpi	r24, 0x6F	; 111
    14fe:	91 f0       	breq	.+36     	; 0x1524 <vfprintf+0x534>
    1500:	18 f4       	brcc	.+6      	; 0x1508 <vfprintf+0x518>
    1502:	88 35       	cpi	r24, 0x58	; 88
    1504:	59 f0       	breq	.+22     	; 0x151c <vfprintf+0x52c>
    1506:	c3 c0       	rjmp	.+390    	; 0x168e <vfprintf+0x69e>
    1508:	80 37       	cpi	r24, 0x70	; 112
    150a:	19 f0       	breq	.+6      	; 0x1512 <vfprintf+0x522>
    150c:	88 37       	cpi	r24, 0x78	; 120
    150e:	11 f0       	breq	.+4      	; 0x1514 <vfprintf+0x524>
    1510:	be c0       	rjmp	.+380    	; 0x168e <vfprintf+0x69e>
    1512:	00 61       	ori	r16, 0x10	; 16
    1514:	04 ff       	sbrs	r16, 4
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x53a>
    1518:	04 60       	ori	r16, 0x04	; 4
    151a:	07 c0       	rjmp	.+14     	; 0x152a <vfprintf+0x53a>
    151c:	94 fe       	sbrs	r9, 4
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <vfprintf+0x540>
    1520:	06 60       	ori	r16, 0x06	; 6
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x540>
    1524:	28 e0       	ldi	r18, 0x08	; 8
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0x544>
    152a:	20 e1       	ldi	r18, 0x10	; 16
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x544>
    1530:	20 e1       	ldi	r18, 0x10	; 16
    1532:	32 e0       	ldi	r19, 0x02	; 2
    1534:	56 01       	movw	r10, r12
    1536:	07 ff       	sbrs	r16, 7
    1538:	09 c0       	rjmp	.+18     	; 0x154c <vfprintf+0x55c>
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	a8 0e       	add	r10, r24
    153e:	b1 1c       	adc	r11, r1
    1540:	f6 01       	movw	r30, r12
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	08 c0       	rjmp	.+16     	; 0x155c <vfprintf+0x56c>
    154c:	f2 e0       	ldi	r31, 0x02	; 2
    154e:	af 0e       	add	r10, r31
    1550:	b1 1c       	adc	r11, r1
    1552:	f6 01       	movw	r30, r12
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a3 01       	movw	r20, r6
    155e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    1562:	c8 2e       	mov	r12, r24
    1564:	c6 18       	sub	r12, r6
    1566:	0f 77       	andi	r16, 0x7F	; 127
    1568:	90 2e       	mov	r9, r16
    156a:	96 fe       	sbrs	r9, 6
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <vfprintf+0x594>
    156e:	09 2d       	mov	r16, r9
    1570:	0e 7f       	andi	r16, 0xFE	; 254
    1572:	c1 16       	cp	r12, r17
    1574:	50 f4       	brcc	.+20     	; 0x158a <vfprintf+0x59a>
    1576:	94 fe       	sbrs	r9, 4
    1578:	0a c0       	rjmp	.+20     	; 0x158e <vfprintf+0x59e>
    157a:	92 fc       	sbrc	r9, 2
    157c:	08 c0       	rjmp	.+16     	; 0x158e <vfprintf+0x59e>
    157e:	09 2d       	mov	r16, r9
    1580:	0e 7e       	andi	r16, 0xEE	; 238
    1582:	05 c0       	rjmp	.+10     	; 0x158e <vfprintf+0x59e>
    1584:	dc 2c       	mov	r13, r12
    1586:	09 2d       	mov	r16, r9
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <vfprintf+0x5a0>
    158a:	dc 2c       	mov	r13, r12
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x5a0>
    158e:	d1 2e       	mov	r13, r17
    1590:	04 ff       	sbrs	r16, 4
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <vfprintf+0x5be>
    1594:	fe 01       	movw	r30, r28
    1596:	ec 0d       	add	r30, r12
    1598:	f1 1d       	adc	r31, r1
    159a:	80 81       	ld	r24, Z
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	11 f4       	brne	.+4      	; 0x15a4 <vfprintf+0x5b4>
    15a0:	09 7e       	andi	r16, 0xE9	; 233
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <vfprintf+0x5c6>
    15a4:	02 ff       	sbrs	r16, 2
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <vfprintf+0x5c4>
    15a8:	d3 94       	inc	r13
    15aa:	d3 94       	inc	r13
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <vfprintf+0x5c6>
    15ae:	80 2f       	mov	r24, r16
    15b0:	86 78       	andi	r24, 0x86	; 134
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <vfprintf+0x5c6>
    15b4:	d3 94       	inc	r13
    15b6:	03 fd       	sbrc	r16, 3
    15b8:	11 c0       	rjmp	.+34     	; 0x15dc <vfprintf+0x5ec>
    15ba:	00 ff       	sbrs	r16, 0
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <vfprintf+0x5da>
    15be:	1c 2d       	mov	r17, r12
    15c0:	d5 14       	cp	r13, r5
    15c2:	80 f4       	brcc	.+32     	; 0x15e4 <vfprintf+0x5f4>
    15c4:	15 0d       	add	r17, r5
    15c6:	1d 19       	sub	r17, r13
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <vfprintf+0x5f4>
    15ca:	d5 14       	cp	r13, r5
    15cc:	58 f4       	brcc	.+22     	; 0x15e4 <vfprintf+0x5f4>
    15ce:	b7 01       	movw	r22, r14
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    15d8:	d3 94       	inc	r13
    15da:	f7 cf       	rjmp	.-18     	; 0x15ca <vfprintf+0x5da>
    15dc:	d5 14       	cp	r13, r5
    15de:	10 f4       	brcc	.+4      	; 0x15e4 <vfprintf+0x5f4>
    15e0:	5d 18       	sub	r5, r13
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <vfprintf+0x5f6>
    15e4:	51 2c       	mov	r5, r1
    15e6:	04 ff       	sbrs	r16, 4
    15e8:	10 c0       	rjmp	.+32     	; 0x160a <vfprintf+0x61a>
    15ea:	b7 01       	movw	r22, r14
    15ec:	80 e3       	ldi	r24, 0x30	; 48
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    15f4:	02 ff       	sbrs	r16, 2
    15f6:	17 c0       	rjmp	.+46     	; 0x1626 <vfprintf+0x636>
    15f8:	01 fd       	sbrc	r16, 1
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x612>
    15fc:	88 e7       	ldi	r24, 0x78	; 120
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x616>
    1602:	88 e5       	ldi	r24, 0x58	; 88
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	b7 01       	movw	r22, r14
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <vfprintf+0x632>
    160a:	80 2f       	mov	r24, r16
    160c:	86 78       	andi	r24, 0x86	; 134
    160e:	59 f0       	breq	.+22     	; 0x1626 <vfprintf+0x636>
    1610:	01 ff       	sbrs	r16, 1
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x628>
    1614:	8b e2       	ldi	r24, 0x2B	; 43
    1616:	01 c0       	rjmp	.+2      	; 0x161a <vfprintf+0x62a>
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	07 fd       	sbrc	r16, 7
    161c:	8d e2       	ldi	r24, 0x2D	; 45
    161e:	b7 01       	movw	r22, r14
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1626:	c1 16       	cp	r12, r17
    1628:	38 f4       	brcc	.+14     	; 0x1638 <vfprintf+0x648>
    162a:	b7 01       	movw	r22, r14
    162c:	80 e3       	ldi	r24, 0x30	; 48
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    1634:	11 50       	subi	r17, 0x01	; 1
    1636:	f7 cf       	rjmp	.-18     	; 0x1626 <vfprintf+0x636>
    1638:	ca 94       	dec	r12
    163a:	f3 01       	movw	r30, r6
    163c:	ec 0d       	add	r30, r12
    163e:	f1 1d       	adc	r31, r1
    1640:	80 81       	ld	r24, Z
    1642:	b7 01       	movw	r22, r14
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    164a:	c1 10       	cpse	r12, r1
    164c:	f5 cf       	rjmp	.-22     	; 0x1638 <vfprintf+0x648>
    164e:	15 c0       	rjmp	.+42     	; 0x167a <vfprintf+0x68a>
    1650:	f4 e0       	ldi	r31, 0x04	; 4
    1652:	f5 15       	cp	r31, r5
    1654:	60 f5       	brcc	.+88     	; 0x16ae <vfprintf+0x6be>
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	58 1a       	sub	r5, r24
    165a:	93 fe       	sbrs	r9, 3
    165c:	1f c0       	rjmp	.+62     	; 0x169c <vfprintf+0x6ac>
    165e:	01 11       	cpse	r16, r1
    1660:	27 c0       	rjmp	.+78     	; 0x16b0 <vfprintf+0x6c0>
    1662:	2c 85       	ldd	r18, Y+12	; 0x0c
    1664:	23 ff       	sbrs	r18, 3
    1666:	2a c0       	rjmp	.+84     	; 0x16bc <vfprintf+0x6cc>
    1668:	08 e6       	ldi	r16, 0x68	; 104
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	39 2d       	mov	r19, r9
    166e:	30 71       	andi	r19, 0x10	; 16
    1670:	93 2e       	mov	r9, r19
    1672:	f8 01       	movw	r30, r16
    1674:	84 91       	lpm	r24, Z
    1676:	81 11       	cpse	r24, r1
    1678:	24 c0       	rjmp	.+72     	; 0x16c2 <vfprintf+0x6d2>
    167a:	55 20       	and	r5, r5
    167c:	09 f4       	brne	.+2      	; 0x1680 <vfprintf+0x690>
    167e:	e4 cc       	rjmp	.-1592   	; 0x1048 <vfprintf+0x58>
    1680:	b7 01       	movw	r22, r14
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    168a:	5a 94       	dec	r5
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <vfprintf+0x68a>
    168e:	f7 01       	movw	r30, r14
    1690:	86 81       	ldd	r24, Z+6	; 0x06
    1692:	97 81       	ldd	r25, Z+7	; 0x07
    1694:	26 c0       	rjmp	.+76     	; 0x16e2 <vfprintf+0x6f2>
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	23 c0       	rjmp	.+70     	; 0x16e2 <vfprintf+0x6f2>
    169c:	b7 01       	movw	r22, r14
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    16a6:	5a 94       	dec	r5
    16a8:	51 10       	cpse	r5, r1
    16aa:	f8 cf       	rjmp	.-16     	; 0x169c <vfprintf+0x6ac>
    16ac:	d8 cf       	rjmp	.-80     	; 0x165e <vfprintf+0x66e>
    16ae:	51 2c       	mov	r5, r1
    16b0:	b7 01       	movw	r22, r14
    16b2:	80 2f       	mov	r24, r16
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    16ba:	d3 cf       	rjmp	.-90     	; 0x1662 <vfprintf+0x672>
    16bc:	0c e6       	ldi	r16, 0x6C	; 108
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	d5 cf       	rjmp	.-86     	; 0x166c <vfprintf+0x67c>
    16c2:	91 10       	cpse	r9, r1
    16c4:	80 52       	subi	r24, 0x20	; 32
    16c6:	b7 01       	movw	r22, r14
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <fputc>
    16ce:	0f 5f       	subi	r16, 0xFF	; 255
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	cf cf       	rjmp	.-98     	; 0x1672 <vfprintf+0x682>
    16d4:	23 e0       	ldi	r18, 0x03	; 3
    16d6:	25 15       	cp	r18, r5
    16d8:	10 f4       	brcc	.+4      	; 0x16de <vfprintf+0x6ee>
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	bd cf       	rjmp	.-134    	; 0x1658 <vfprintf+0x668>
    16de:	51 2c       	mov	r5, r1
    16e0:	c0 cf       	rjmp	.-128    	; 0x1662 <vfprintf+0x672>
    16e2:	60 96       	adiw	r28, 0x10	; 16
    16e4:	e2 e1       	ldi	r30, 0x12	; 18
    16e6:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__epilogue_restores__>

000016ea <__prologue_saves__>:
    16ea:	2f 92       	push	r2
    16ec:	3f 92       	push	r3
    16ee:	4f 92       	push	r4
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	ca 1b       	sub	r28, r26
    1714:	db 0b       	sbc	r29, r27
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	09 94       	ijmp

00001722 <__epilogue_restores__>:
    1722:	2a 88       	ldd	r2, Y+18	; 0x12
    1724:	39 88       	ldd	r3, Y+17	; 0x11
    1726:	48 88       	ldd	r4, Y+16	; 0x10
    1728:	5f 84       	ldd	r5, Y+15	; 0x0f
    172a:	6e 84       	ldd	r6, Y+14	; 0x0e
    172c:	7d 84       	ldd	r7, Y+13	; 0x0d
    172e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1730:	9b 84       	ldd	r9, Y+11	; 0x0b
    1732:	aa 84       	ldd	r10, Y+10	; 0x0a
    1734:	b9 84       	ldd	r11, Y+9	; 0x09
    1736:	c8 84       	ldd	r12, Y+8	; 0x08
    1738:	df 80       	ldd	r13, Y+7	; 0x07
    173a:	ee 80       	ldd	r14, Y+6	; 0x06
    173c:	fd 80       	ldd	r15, Y+5	; 0x05
    173e:	0c 81       	ldd	r16, Y+4	; 0x04
    1740:	1b 81       	ldd	r17, Y+3	; 0x03
    1742:	aa 81       	ldd	r26, Y+2	; 0x02
    1744:	b9 81       	ldd	r27, Y+1	; 0x01
    1746:	ce 0f       	add	r28, r30
    1748:	d1 1d       	adc	r29, r1
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	ed 01       	movw	r28, r26
    1756:	08 95       	ret

00001758 <malloc>:
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	91 05       	cpc	r25, r1
    1764:	10 f4       	brcc	.+4      	; 0x176a <malloc+0x12>
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__flp>
    176e:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <__flp+0x1>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	30 97       	sbiw	r30, 0x00	; 0
    177c:	19 f1       	breq	.+70     	; 0x17c4 <malloc+0x6c>
    177e:	40 81       	ld	r20, Z
    1780:	51 81       	ldd	r21, Z+1	; 0x01
    1782:	02 81       	ldd	r16, Z+2	; 0x02
    1784:	13 81       	ldd	r17, Z+3	; 0x03
    1786:	48 17       	cp	r20, r24
    1788:	59 07       	cpc	r21, r25
    178a:	c8 f0       	brcs	.+50     	; 0x17be <malloc+0x66>
    178c:	84 17       	cp	r24, r20
    178e:	95 07       	cpc	r25, r21
    1790:	69 f4       	brne	.+26     	; 0x17ac <malloc+0x54>
    1792:	10 97       	sbiw	r26, 0x00	; 0
    1794:	31 f0       	breq	.+12     	; 0x17a2 <malloc+0x4a>
    1796:	12 96       	adiw	r26, 0x02	; 2
    1798:	0c 93       	st	X, r16
    179a:	12 97       	sbiw	r26, 0x02	; 2
    179c:	13 96       	adiw	r26, 0x03	; 3
    179e:	1c 93       	st	X, r17
    17a0:	27 c0       	rjmp	.+78     	; 0x17f0 <malloc+0x98>
    17a2:	00 93 7b 01 	sts	0x017B, r16	; 0x80017b <__flp>
    17a6:	10 93 7c 01 	sts	0x017C, r17	; 0x80017c <__flp+0x1>
    17aa:	22 c0       	rjmp	.+68     	; 0x17f0 <malloc+0x98>
    17ac:	21 15       	cp	r18, r1
    17ae:	31 05       	cpc	r19, r1
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <malloc+0x60>
    17b2:	42 17       	cp	r20, r18
    17b4:	53 07       	cpc	r21, r19
    17b6:	18 f4       	brcc	.+6      	; 0x17be <malloc+0x66>
    17b8:	9a 01       	movw	r18, r20
    17ba:	bd 01       	movw	r22, r26
    17bc:	ef 01       	movw	r28, r30
    17be:	df 01       	movw	r26, r30
    17c0:	f8 01       	movw	r30, r16
    17c2:	db cf       	rjmp	.-74     	; 0x177a <malloc+0x22>
    17c4:	21 15       	cp	r18, r1
    17c6:	31 05       	cpc	r19, r1
    17c8:	f9 f0       	breq	.+62     	; 0x1808 <malloc+0xb0>
    17ca:	28 1b       	sub	r18, r24
    17cc:	39 0b       	sbc	r19, r25
    17ce:	24 30       	cpi	r18, 0x04	; 4
    17d0:	31 05       	cpc	r19, r1
    17d2:	80 f4       	brcc	.+32     	; 0x17f4 <malloc+0x9c>
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	61 15       	cp	r22, r1
    17da:	71 05       	cpc	r23, r1
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <malloc+0x8e>
    17de:	fb 01       	movw	r30, r22
    17e0:	93 83       	std	Z+3, r25	; 0x03
    17e2:	82 83       	std	Z+2, r24	; 0x02
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <malloc+0x96>
    17e6:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <__flp+0x1>
    17ea:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <__flp>
    17ee:	fe 01       	movw	r30, r28
    17f0:	32 96       	adiw	r30, 0x02	; 2
    17f2:	44 c0       	rjmp	.+136    	; 0x187c <malloc+0x124>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e2 0f       	add	r30, r18
    17f8:	f3 1f       	adc	r31, r19
    17fa:	81 93       	st	Z+, r24
    17fc:	91 93       	st	Z+, r25
    17fe:	22 50       	subi	r18, 0x02	; 2
    1800:	31 09       	sbc	r19, r1
    1802:	39 83       	std	Y+1, r19	; 0x01
    1804:	28 83       	st	Y, r18
    1806:	3a c0       	rjmp	.+116    	; 0x187c <malloc+0x124>
    1808:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
    180c:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
    1810:	23 2b       	or	r18, r19
    1812:	41 f4       	brne	.+16     	; 0x1824 <malloc+0xcc>
    1814:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1818:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    181c:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <__brkval+0x1>
    1820:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <__brkval>
    1824:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1828:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    182c:	21 15       	cp	r18, r1
    182e:	31 05       	cpc	r19, r1
    1830:	41 f4       	brne	.+16     	; 0x1842 <malloc+0xea>
    1832:	2d b7       	in	r18, 0x3d	; 61
    1834:	3e b7       	in	r19, 0x3e	; 62
    1836:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    183a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    183e:	24 1b       	sub	r18, r20
    1840:	35 0b       	sbc	r19, r21
    1842:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <__brkval>
    1846:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <__brkval+0x1>
    184a:	e2 17       	cp	r30, r18
    184c:	f3 07       	cpc	r31, r19
    184e:	a0 f4       	brcc	.+40     	; 0x1878 <malloc+0x120>
    1850:	2e 1b       	sub	r18, r30
    1852:	3f 0b       	sbc	r19, r31
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	78 f0       	brcs	.+30     	; 0x1878 <malloc+0x120>
    185a:	ac 01       	movw	r20, r24
    185c:	4e 5f       	subi	r20, 0xFE	; 254
    185e:	5f 4f       	sbci	r21, 0xFF	; 255
    1860:	24 17       	cp	r18, r20
    1862:	35 07       	cpc	r19, r21
    1864:	48 f0       	brcs	.+18     	; 0x1878 <malloc+0x120>
    1866:	4e 0f       	add	r20, r30
    1868:	5f 1f       	adc	r21, r31
    186a:	50 93 7a 01 	sts	0x017A, r21	; 0x80017a <__brkval+0x1>
    186e:	40 93 79 01 	sts	0x0179, r20	; 0x800179 <__brkval>
    1872:	81 93       	st	Z+, r24
    1874:	91 93       	st	Z+, r25
    1876:	02 c0       	rjmp	.+4      	; 0x187c <malloc+0x124>
    1878:	e0 e0       	ldi	r30, 0x00	; 0
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	cf 01       	movw	r24, r30
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <free>:
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	09 f4       	brne	.+2      	; 0x1892 <free+0xa>
    1890:	81 c0       	rjmp	.+258    	; 0x1994 <free+0x10c>
    1892:	fc 01       	movw	r30, r24
    1894:	32 97       	sbiw	r30, 0x02	; 2
    1896:	13 82       	std	Z+3, r1	; 0x03
    1898:	12 82       	std	Z+2, r1	; 0x02
    189a:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__flp>
    189e:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <__flp+0x1>
    18a2:	10 97       	sbiw	r26, 0x00	; 0
    18a4:	81 f4       	brne	.+32     	; 0x18c6 <free+0x3e>
    18a6:	20 81       	ld	r18, Z
    18a8:	31 81       	ldd	r19, Z+1	; 0x01
    18aa:	82 0f       	add	r24, r18
    18ac:	93 1f       	adc	r25, r19
    18ae:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
    18b2:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
    18b6:	28 17       	cp	r18, r24
    18b8:	39 07       	cpc	r19, r25
    18ba:	51 f5       	brne	.+84     	; 0x1910 <free+0x88>
    18bc:	f0 93 7a 01 	sts	0x017A, r31	; 0x80017a <__brkval+0x1>
    18c0:	e0 93 79 01 	sts	0x0179, r30	; 0x800179 <__brkval>
    18c4:	67 c0       	rjmp	.+206    	; 0x1994 <free+0x10c>
    18c6:	ed 01       	movw	r28, r26
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	ce 17       	cp	r28, r30
    18ce:	df 07       	cpc	r29, r31
    18d0:	40 f4       	brcc	.+16     	; 0x18e2 <free+0x5a>
    18d2:	4a 81       	ldd	r20, Y+2	; 0x02
    18d4:	5b 81       	ldd	r21, Y+3	; 0x03
    18d6:	9e 01       	movw	r18, r28
    18d8:	41 15       	cp	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	f1 f0       	breq	.+60     	; 0x191a <free+0x92>
    18de:	ea 01       	movw	r28, r20
    18e0:	f5 cf       	rjmp	.-22     	; 0x18cc <free+0x44>
    18e2:	d3 83       	std	Z+3, r29	; 0x03
    18e4:	c2 83       	std	Z+2, r28	; 0x02
    18e6:	40 81       	ld	r20, Z
    18e8:	51 81       	ldd	r21, Z+1	; 0x01
    18ea:	84 0f       	add	r24, r20
    18ec:	95 1f       	adc	r25, r21
    18ee:	c8 17       	cp	r28, r24
    18f0:	d9 07       	cpc	r29, r25
    18f2:	59 f4       	brne	.+22     	; 0x190a <free+0x82>
    18f4:	88 81       	ld	r24, Y
    18f6:	99 81       	ldd	r25, Y+1	; 0x01
    18f8:	84 0f       	add	r24, r20
    18fa:	95 1f       	adc	r25, r21
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	9b 81       	ldd	r25, Y+3	; 0x03
    1906:	93 83       	std	Z+3, r25	; 0x03
    1908:	82 83       	std	Z+2, r24	; 0x02
    190a:	21 15       	cp	r18, r1
    190c:	31 05       	cpc	r19, r1
    190e:	29 f4       	brne	.+10     	; 0x191a <free+0x92>
    1910:	f0 93 7c 01 	sts	0x017C, r31	; 0x80017c <__flp+0x1>
    1914:	e0 93 7b 01 	sts	0x017B, r30	; 0x80017b <__flp>
    1918:	3d c0       	rjmp	.+122    	; 0x1994 <free+0x10c>
    191a:	e9 01       	movw	r28, r18
    191c:	fb 83       	std	Y+3, r31	; 0x03
    191e:	ea 83       	std	Y+2, r30	; 0x02
    1920:	49 91       	ld	r20, Y+
    1922:	59 91       	ld	r21, Y+
    1924:	c4 0f       	add	r28, r20
    1926:	d5 1f       	adc	r29, r21
    1928:	ec 17       	cp	r30, r28
    192a:	fd 07       	cpc	r31, r29
    192c:	61 f4       	brne	.+24     	; 0x1946 <free+0xbe>
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	84 0f       	add	r24, r20
    1934:	95 1f       	adc	r25, r21
    1936:	02 96       	adiw	r24, 0x02	; 2
    1938:	e9 01       	movw	r28, r18
    193a:	99 83       	std	Y+1, r25	; 0x01
    193c:	88 83       	st	Y, r24
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	e0 e0       	ldi	r30, 0x00	; 0
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	19 f0       	breq	.+6      	; 0x195c <free+0xd4>
    1956:	fd 01       	movw	r30, r26
    1958:	dc 01       	movw	r26, r24
    195a:	f7 cf       	rjmp	.-18     	; 0x194a <free+0xc2>
    195c:	8d 91       	ld	r24, X+
    195e:	9c 91       	ld	r25, X
    1960:	11 97       	sbiw	r26, 0x01	; 1
    1962:	9d 01       	movw	r18, r26
    1964:	2e 5f       	subi	r18, 0xFE	; 254
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
    1970:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	69 f4       	brne	.+26     	; 0x1994 <free+0x10c>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	29 f4       	brne	.+10     	; 0x1988 <free+0x100>
    197e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__flp+0x1>
    1982:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__flp>
    1986:	02 c0       	rjmp	.+4      	; 0x198c <free+0x104>
    1988:	13 82       	std	Z+3, r1	; 0x03
    198a:	12 82       	std	Z+2, r1	; 0x02
    198c:	b0 93 7a 01 	sts	0x017A, r27	; 0x80017a <__brkval+0x1>
    1990:	a0 93 79 01 	sts	0x0179, r26	; 0x800179 <__brkval>
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <__ftoa_engine>:
    199a:	28 30       	cpi	r18, 0x08	; 8
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <__ftoa_engine+0x6>
    199e:	27 e0       	ldi	r18, 0x07	; 7
    19a0:	33 27       	eor	r19, r19
    19a2:	da 01       	movw	r26, r20
    19a4:	99 0f       	add	r25, r25
    19a6:	31 1d       	adc	r19, r1
    19a8:	87 fd       	sbrc	r24, 7
    19aa:	91 60       	ori	r25, 0x01	; 1
    19ac:	00 96       	adiw	r24, 0x00	; 0
    19ae:	61 05       	cpc	r22, r1
    19b0:	71 05       	cpc	r23, r1
    19b2:	39 f4       	brne	.+14     	; 0x19c2 <__ftoa_engine+0x28>
    19b4:	32 60       	ori	r19, 0x02	; 2
    19b6:	2e 5f       	subi	r18, 0xFE	; 254
    19b8:	3d 93       	st	X+, r19
    19ba:	30 e3       	ldi	r19, 0x30	; 48
    19bc:	2a 95       	dec	r18
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <__ftoa_engine+0x1e>
    19c0:	08 95       	ret
    19c2:	9f 3f       	cpi	r25, 0xFF	; 255
    19c4:	30 f0       	brcs	.+12     	; 0x19d2 <__ftoa_engine+0x38>
    19c6:	80 38       	cpi	r24, 0x80	; 128
    19c8:	71 05       	cpc	r23, r1
    19ca:	61 05       	cpc	r22, r1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <__ftoa_engine+0x36>
    19ce:	3c 5f       	subi	r19, 0xFC	; 252
    19d0:	3c 5f       	subi	r19, 0xFC	; 252
    19d2:	3d 93       	st	X+, r19
    19d4:	91 30       	cpi	r25, 0x01	; 1
    19d6:	08 f0       	brcs	.+2      	; 0x19da <__ftoa_engine+0x40>
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	91 1d       	adc	r25, r1
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	1f 93       	push	r17
    19e2:	0f 93       	push	r16
    19e4:	ff 92       	push	r15
    19e6:	ef 92       	push	r14
    19e8:	19 2f       	mov	r17, r25
    19ea:	98 7f       	andi	r25, 0xF8	; 248
    19ec:	96 95       	lsr	r25
    19ee:	e9 2f       	mov	r30, r25
    19f0:	96 95       	lsr	r25
    19f2:	96 95       	lsr	r25
    19f4:	e9 0f       	add	r30, r25
    19f6:	ff 27       	eor	r31, r31
    19f8:	e6 53       	subi	r30, 0x36	; 54
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	99 27       	eor	r25, r25
    19fe:	33 27       	eor	r19, r19
    1a00:	ee 24       	eor	r14, r14
    1a02:	ff 24       	eor	r15, r15
    1a04:	a7 01       	movw	r20, r14
    1a06:	e7 01       	movw	r28, r14
    1a08:	05 90       	lpm	r0, Z+
    1a0a:	08 94       	sec
    1a0c:	07 94       	ror	r0
    1a0e:	28 f4       	brcc	.+10     	; 0x1a1a <__ftoa_engine+0x80>
    1a10:	36 0f       	add	r19, r22
    1a12:	e7 1e       	adc	r14, r23
    1a14:	f8 1e       	adc	r15, r24
    1a16:	49 1f       	adc	r20, r25
    1a18:	51 1d       	adc	r21, r1
    1a1a:	66 0f       	add	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	06 94       	lsr	r0
    1a24:	a1 f7       	brne	.-24     	; 0x1a0e <__ftoa_engine+0x74>
    1a26:	05 90       	lpm	r0, Z+
    1a28:	07 94       	ror	r0
    1a2a:	28 f4       	brcc	.+10     	; 0x1a36 <__ftoa_engine+0x9c>
    1a2c:	e7 0e       	add	r14, r23
    1a2e:	f8 1e       	adc	r15, r24
    1a30:	49 1f       	adc	r20, r25
    1a32:	56 1f       	adc	r21, r22
    1a34:	c1 1d       	adc	r28, r1
    1a36:	77 0f       	add	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	06 94       	lsr	r0
    1a40:	a1 f7       	brne	.-24     	; 0x1a2a <__ftoa_engine+0x90>
    1a42:	05 90       	lpm	r0, Z+
    1a44:	07 94       	ror	r0
    1a46:	28 f4       	brcc	.+10     	; 0x1a52 <__ftoa_engine+0xb8>
    1a48:	f8 0e       	add	r15, r24
    1a4a:	49 1f       	adc	r20, r25
    1a4c:	56 1f       	adc	r21, r22
    1a4e:	c7 1f       	adc	r28, r23
    1a50:	d1 1d       	adc	r29, r1
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	06 94       	lsr	r0
    1a5c:	a1 f7       	brne	.-24     	; 0x1a46 <__ftoa_engine+0xac>
    1a5e:	05 90       	lpm	r0, Z+
    1a60:	07 94       	ror	r0
    1a62:	20 f4       	brcc	.+8      	; 0x1a6c <__ftoa_engine+0xd2>
    1a64:	49 0f       	add	r20, r25
    1a66:	56 1f       	adc	r21, r22
    1a68:	c7 1f       	adc	r28, r23
    1a6a:	d8 1f       	adc	r29, r24
    1a6c:	99 0f       	add	r25, r25
    1a6e:	66 1f       	adc	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	06 94       	lsr	r0
    1a76:	a9 f7       	brne	.-22     	; 0x1a62 <__ftoa_engine+0xc8>
    1a78:	84 91       	lpm	r24, Z
    1a7a:	10 95       	com	r17
    1a7c:	17 70       	andi	r17, 0x07	; 7
    1a7e:	41 f0       	breq	.+16     	; 0x1a90 <__ftoa_engine+0xf6>
    1a80:	d6 95       	lsr	r29
    1a82:	c7 95       	ror	r28
    1a84:	57 95       	ror	r21
    1a86:	47 95       	ror	r20
    1a88:	f7 94       	ror	r15
    1a8a:	e7 94       	ror	r14
    1a8c:	1a 95       	dec	r17
    1a8e:	c1 f7       	brne	.-16     	; 0x1a80 <__ftoa_engine+0xe6>
    1a90:	e0 e7       	ldi	r30, 0x70	; 112
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	68 94       	set
    1a96:	15 90       	lpm	r1, Z+
    1a98:	15 91       	lpm	r17, Z+
    1a9a:	35 91       	lpm	r19, Z+
    1a9c:	65 91       	lpm	r22, Z+
    1a9e:	95 91       	lpm	r25, Z+
    1aa0:	05 90       	lpm	r0, Z+
    1aa2:	7f e2       	ldi	r23, 0x2F	; 47
    1aa4:	73 95       	inc	r23
    1aa6:	e1 18       	sub	r14, r1
    1aa8:	f1 0a       	sbc	r15, r17
    1aaa:	43 0b       	sbc	r20, r19
    1aac:	56 0b       	sbc	r21, r22
    1aae:	c9 0b       	sbc	r28, r25
    1ab0:	d0 09       	sbc	r29, r0
    1ab2:	c0 f7       	brcc	.-16     	; 0x1aa4 <__ftoa_engine+0x10a>
    1ab4:	e1 0c       	add	r14, r1
    1ab6:	f1 1e       	adc	r15, r17
    1ab8:	43 1f       	adc	r20, r19
    1aba:	56 1f       	adc	r21, r22
    1abc:	c9 1f       	adc	r28, r25
    1abe:	d0 1d       	adc	r29, r0
    1ac0:	7e f4       	brtc	.+30     	; 0x1ae0 <__ftoa_engine+0x146>
    1ac2:	70 33       	cpi	r23, 0x30	; 48
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <__ftoa_engine+0x130>
    1ac6:	8a 95       	dec	r24
    1ac8:	e6 cf       	rjmp	.-52     	; 0x1a96 <__ftoa_engine+0xfc>
    1aca:	e8 94       	clt
    1acc:	01 50       	subi	r16, 0x01	; 1
    1ace:	30 f0       	brcs	.+12     	; 0x1adc <__ftoa_engine+0x142>
    1ad0:	08 0f       	add	r16, r24
    1ad2:	0a f4       	brpl	.+2      	; 0x1ad6 <__ftoa_engine+0x13c>
    1ad4:	00 27       	eor	r16, r16
    1ad6:	02 17       	cp	r16, r18
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <__ftoa_engine+0x142>
    1ada:	20 2f       	mov	r18, r16
    1adc:	23 95       	inc	r18
    1ade:	02 2f       	mov	r16, r18
    1ae0:	7a 33       	cpi	r23, 0x3A	; 58
    1ae2:	28 f0       	brcs	.+10     	; 0x1aee <__ftoa_engine+0x154>
    1ae4:	79 e3       	ldi	r23, 0x39	; 57
    1ae6:	7d 93       	st	X+, r23
    1ae8:	2a 95       	dec	r18
    1aea:	e9 f7       	brne	.-6      	; 0x1ae6 <__ftoa_engine+0x14c>
    1aec:	10 c0       	rjmp	.+32     	; 0x1b0e <__ftoa_engine+0x174>
    1aee:	7d 93       	st	X+, r23
    1af0:	2a 95       	dec	r18
    1af2:	89 f6       	brne	.-94     	; 0x1a96 <__ftoa_engine+0xfc>
    1af4:	06 94       	lsr	r0
    1af6:	97 95       	ror	r25
    1af8:	67 95       	ror	r22
    1afa:	37 95       	ror	r19
    1afc:	17 95       	ror	r17
    1afe:	17 94       	ror	r1
    1b00:	e1 18       	sub	r14, r1
    1b02:	f1 0a       	sbc	r15, r17
    1b04:	43 0b       	sbc	r20, r19
    1b06:	56 0b       	sbc	r21, r22
    1b08:	c9 0b       	sbc	r28, r25
    1b0a:	d0 09       	sbc	r29, r0
    1b0c:	98 f0       	brcs	.+38     	; 0x1b34 <__ftoa_engine+0x19a>
    1b0e:	23 95       	inc	r18
    1b10:	7e 91       	ld	r23, -X
    1b12:	73 95       	inc	r23
    1b14:	7a 33       	cpi	r23, 0x3A	; 58
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__ftoa_engine+0x180>
    1b18:	70 e3       	ldi	r23, 0x30	; 48
    1b1a:	7c 93       	st	X, r23
    1b1c:	20 13       	cpse	r18, r16
    1b1e:	b8 f7       	brcc	.-18     	; 0x1b0e <__ftoa_engine+0x174>
    1b20:	7e 91       	ld	r23, -X
    1b22:	70 61       	ori	r23, 0x10	; 16
    1b24:	7d 93       	st	X+, r23
    1b26:	30 f0       	brcs	.+12     	; 0x1b34 <__ftoa_engine+0x19a>
    1b28:	83 95       	inc	r24
    1b2a:	71 e3       	ldi	r23, 0x31	; 49
    1b2c:	7d 93       	st	X+, r23
    1b2e:	70 e3       	ldi	r23, 0x30	; 48
    1b30:	2a 95       	dec	r18
    1b32:	e1 f7       	brne	.-8      	; 0x1b2c <__ftoa_engine+0x192>
    1b34:	11 24       	eor	r1, r1
    1b36:	ef 90       	pop	r14
    1b38:	ff 90       	pop	r15
    1b3a:	0f 91       	pop	r16
    1b3c:	1f 91       	pop	r17
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	99 27       	eor	r25, r25
    1b44:	87 fd       	sbrc	r24, 7
    1b46:	90 95       	com	r25
    1b48:	08 95       	ret

00001b4a <strnlen_P>:
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	05 90       	lpm	r0, Z+
    1b4e:	61 50       	subi	r22, 0x01	; 1
    1b50:	70 40       	sbci	r23, 0x00	; 0
    1b52:	01 10       	cpse	r0, r1
    1b54:	d8 f7       	brcc	.-10     	; 0x1b4c <strnlen_P+0x2>
    1b56:	80 95       	com	r24
    1b58:	90 95       	com	r25
    1b5a:	8e 0f       	add	r24, r30
    1b5c:	9f 1f       	adc	r25, r31
    1b5e:	08 95       	ret

00001b60 <strnlen>:
    1b60:	fc 01       	movw	r30, r24
    1b62:	61 50       	subi	r22, 0x01	; 1
    1b64:	70 40       	sbci	r23, 0x00	; 0
    1b66:	01 90       	ld	r0, Z+
    1b68:	01 10       	cpse	r0, r1
    1b6a:	d8 f7       	brcc	.-10     	; 0x1b62 <strnlen+0x2>
    1b6c:	80 95       	com	r24
    1b6e:	90 95       	com	r25
    1b70:	8e 0f       	add	r24, r30
    1b72:	9f 1f       	adc	r25, r31
    1b74:	08 95       	ret

00001b76 <fputc>:
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	fb 01       	movw	r30, r22
    1b80:	23 81       	ldd	r18, Z+3	; 0x03
    1b82:	21 fd       	sbrc	r18, 1
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <fputc+0x16>
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	9f ef       	ldi	r25, 0xFF	; 255
    1b8a:	2c c0       	rjmp	.+88     	; 0x1be4 <fputc+0x6e>
    1b8c:	22 ff       	sbrs	r18, 2
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <fputc+0x46>
    1b90:	46 81       	ldd	r20, Z+6	; 0x06
    1b92:	57 81       	ldd	r21, Z+7	; 0x07
    1b94:	24 81       	ldd	r18, Z+4	; 0x04
    1b96:	35 81       	ldd	r19, Z+5	; 0x05
    1b98:	42 17       	cp	r20, r18
    1b9a:	53 07       	cpc	r21, r19
    1b9c:	44 f4       	brge	.+16     	; 0x1bae <fputc+0x38>
    1b9e:	a0 81       	ld	r26, Z
    1ba0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba2:	9d 01       	movw	r18, r26
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	31 83       	std	Z+1, r19	; 0x01
    1baa:	20 83       	st	Z, r18
    1bac:	8c 93       	st	X, r24
    1bae:	26 81       	ldd	r18, Z+6	; 0x06
    1bb0:	37 81       	ldd	r19, Z+7	; 0x07
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	37 83       	std	Z+7, r19	; 0x07
    1bb8:	26 83       	std	Z+6, r18	; 0x06
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <fputc+0x6e>
    1bbc:	8b 01       	movw	r16, r22
    1bbe:	ec 01       	movw	r28, r24
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	00 84       	ldd	r0, Z+8	; 0x08
    1bc4:	f1 85       	ldd	r31, Z+9	; 0x09
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	09 95       	icall
    1bca:	89 2b       	or	r24, r25
    1bcc:	e1 f6       	brne	.-72     	; 0x1b86 <fputc+0x10>
    1bce:	d8 01       	movw	r26, r16
    1bd0:	16 96       	adiw	r26, 0x06	; 6
    1bd2:	8d 91       	ld	r24, X+
    1bd4:	9c 91       	ld	r25, X
    1bd6:	17 97       	sbiw	r26, 0x07	; 7
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	17 96       	adiw	r26, 0x07	; 7
    1bdc:	9c 93       	st	X, r25
    1bde:	8e 93       	st	-X, r24
    1be0:	16 97       	sbiw	r26, 0x06	; 6
    1be2:	ce 01       	movw	r24, r28
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

00001bee <sprintf>:
    1bee:	ae e0       	ldi	r26, 0x0E	; 14
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ed ef       	ldi	r30, 0xFD	; 253
    1bf4:	fd e0       	ldi	r31, 0x0D	; 13
    1bf6:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__prologue_saves__+0x1c>
    1bfa:	0d 89       	ldd	r16, Y+21	; 0x15
    1bfc:	1e 89       	ldd	r17, Y+22	; 0x16
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	8c 83       	std	Y+4, r24	; 0x04
    1c02:	1a 83       	std	Y+2, r17	; 0x02
    1c04:	09 83       	std	Y+1, r16	; 0x01
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f e7       	ldi	r25, 0x7F	; 127
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	ae 01       	movw	r20, r28
    1c10:	47 5e       	subi	r20, 0xE7	; 231
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	6f 89       	ldd	r22, Y+23	; 0x17
    1c16:	78 8d       	ldd	r23, Y+24	; 0x18
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	0e 94 f8 07 	call	0xff0	; 0xff0 <vfprintf>
    1c20:	ef 81       	ldd	r30, Y+7	; 0x07
    1c22:	f8 85       	ldd	r31, Y+8	; 0x08
    1c24:	e0 0f       	add	r30, r16
    1c26:	f1 1f       	adc	r31, r17
    1c28:	10 82       	st	Z, r1
    1c2a:	2e 96       	adiw	r28, 0x0e	; 14
    1c2c:	e4 e0       	ldi	r30, 0x04	; 4
    1c2e:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__epilogue_restores__+0x1c>

00001c32 <__ultoa_invert>:
    1c32:	fa 01       	movw	r30, r20
    1c34:	aa 27       	eor	r26, r26
    1c36:	28 30       	cpi	r18, 0x08	; 8
    1c38:	51 f1       	breq	.+84     	; 0x1c8e <__ultoa_invert+0x5c>
    1c3a:	20 31       	cpi	r18, 0x10	; 16
    1c3c:	81 f1       	breq	.+96     	; 0x1c9e <__ultoa_invert+0x6c>
    1c3e:	e8 94       	clt
    1c40:	6f 93       	push	r22
    1c42:	6e 7f       	andi	r22, 0xFE	; 254
    1c44:	6e 5f       	subi	r22, 0xFE	; 254
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	af 4f       	sbci	r26, 0xFF	; 255
    1c4e:	b1 e0       	ldi	r27, 0x01	; 1
    1c50:	3e d0       	rcall	.+124    	; 0x1cce <__ultoa_invert+0x9c>
    1c52:	b4 e0       	ldi	r27, 0x04	; 4
    1c54:	3c d0       	rcall	.+120    	; 0x1cce <__ultoa_invert+0x9c>
    1c56:	67 0f       	add	r22, r23
    1c58:	78 1f       	adc	r23, r24
    1c5a:	89 1f       	adc	r24, r25
    1c5c:	9a 1f       	adc	r25, r26
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	68 0f       	add	r22, r24
    1c62:	79 1f       	adc	r23, r25
    1c64:	8a 1f       	adc	r24, r26
    1c66:	91 1d       	adc	r25, r1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	6a 0f       	add	r22, r26
    1c6c:	71 1d       	adc	r23, r1
    1c6e:	81 1d       	adc	r24, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	a1 1d       	adc	r26, r1
    1c74:	20 d0       	rcall	.+64     	; 0x1cb6 <__ultoa_invert+0x84>
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <__ultoa_invert+0x48>
    1c78:	68 94       	set
    1c7a:	3f 91       	pop	r19
    1c7c:	2a e0       	ldi	r18, 0x0A	; 10
    1c7e:	26 9f       	mul	r18, r22
    1c80:	11 24       	eor	r1, r1
    1c82:	30 19       	sub	r19, r0
    1c84:	30 5d       	subi	r19, 0xD0	; 208
    1c86:	31 93       	st	Z+, r19
    1c88:	de f6       	brtc	.-74     	; 0x1c40 <__ultoa_invert+0xe>
    1c8a:	cf 01       	movw	r24, r30
    1c8c:	08 95       	ret
    1c8e:	46 2f       	mov	r20, r22
    1c90:	47 70       	andi	r20, 0x07	; 7
    1c92:	40 5d       	subi	r20, 0xD0	; 208
    1c94:	41 93       	st	Z+, r20
    1c96:	b3 e0       	ldi	r27, 0x03	; 3
    1c98:	0f d0       	rcall	.+30     	; 0x1cb8 <__ultoa_invert+0x86>
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__ultoa_invert+0x5c>
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <__ultoa_invert+0x58>
    1c9e:	46 2f       	mov	r20, r22
    1ca0:	4f 70       	andi	r20, 0x0F	; 15
    1ca2:	40 5d       	subi	r20, 0xD0	; 208
    1ca4:	4a 33       	cpi	r20, 0x3A	; 58
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <__ultoa_invert+0x7c>
    1ca8:	49 5d       	subi	r20, 0xD9	; 217
    1caa:	31 fd       	sbrc	r19, 1
    1cac:	40 52       	subi	r20, 0x20	; 32
    1cae:	41 93       	st	Z+, r20
    1cb0:	02 d0       	rcall	.+4      	; 0x1cb6 <__ultoa_invert+0x84>
    1cb2:	a9 f7       	brne	.-22     	; 0x1c9e <__ultoa_invert+0x6c>
    1cb4:	ea cf       	rjmp	.-44     	; 0x1c8a <__ultoa_invert+0x58>
    1cb6:	b4 e0       	ldi	r27, 0x04	; 4
    1cb8:	a6 95       	lsr	r26
    1cba:	97 95       	ror	r25
    1cbc:	87 95       	ror	r24
    1cbe:	77 95       	ror	r23
    1cc0:	67 95       	ror	r22
    1cc2:	ba 95       	dec	r27
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <__ultoa_invert+0x86>
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	61 05       	cpc	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	08 95       	ret
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	0a 2e       	mov	r0, r26
    1cd4:	06 94       	lsr	r0
    1cd6:	57 95       	ror	r21
    1cd8:	47 95       	ror	r20
    1cda:	37 95       	ror	r19
    1cdc:	27 95       	ror	r18
    1cde:	ba 95       	dec	r27
    1ce0:	c9 f7       	brne	.-14     	; 0x1cd4 <__ultoa_invert+0xa2>
    1ce2:	62 0f       	add	r22, r18
    1ce4:	73 1f       	adc	r23, r19
    1ce6:	84 1f       	adc	r24, r20
    1ce8:	95 1f       	adc	r25, r21
    1cea:	a0 1d       	adc	r26, r0
    1cec:	08 95       	ret

00001cee <_exit>:
    1cee:	f8 94       	cli

00001cf0 <__stop_program>:
    1cf0:	ff cf       	rjmp	.-2      	; 0x1cf0 <__stop_program>
